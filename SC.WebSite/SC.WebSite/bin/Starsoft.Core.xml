<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Starsoft.Core</name>
    </assembly>
    <members>
        <member name="T:Starsoft.Core.Collections.IndexSpan">
            <summary>
            Represents a set of indexes which will be iterated on.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.IndexSpan.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="F:Starsoft.Core.Collections.IndexSpan.StartIndex">
            <summary>
            The start index.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Collections.IndexSpan.Count">
            <summary>
            Number of items represented in this iteration.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.IndexSpan.EndIndex">
            <summary>
            The ending index, as calculated using the startIndex and count.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Collections.IterationSplitter">
            <summary>
            Class used to split indexes into iteration spans.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.IterationSplitter.CalculateItemsPerIteration(System.Double,System.Int32)">
            <summary>
            Calculate how many items there will be in an iteration.
            </summary>
            <param name="totalCount"></param>
            <param name="numberOfIterations"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.IterationSplitter.SplitIterations(System.Int32,System.Int32)">
            <summary>
            Splits the iteratons into parts(spans).
            </summary>
            <param name="totalCount"></param>
            <param name="numberOfIterations"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.IterationSplitter.Split(System.Int32,System.Int32)">
            <summary>
            Splits the iteratons into parts(spans).
            </summary>
            <param name="totalCount"></param>
            <param name="itemsPerIteration"></param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Queue.IQueueRepository`1">
            <summary>
            Interface for a persistance queue repository.
            </summary>
            <typeparam name="T">Type of items to store in repository.</typeparam>
        </member>
        <member name="M:Starsoft.Core.Queue.IQueueRepository`1.Save(System.Collections.Generic.IList{`0})">
            <summary>
            Saves the specified items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.IQueueRepository`1.LoadAll">
            <summary>
            Loads all.
            </summary>
            <returns>List of all items.</returns>
        </member>
        <member name="M:Starsoft.Core.Queue.IQueueRepository`1.LoadBatch">
            <summary>
            Loads the batch.
            </summary>
            <returns>List of all items.</returns>
        </member>
        <member name="T:Starsoft.Core.Parsing.LexSettings">
            <summary>
            Settings for Lex parser.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexSettings.QuotesChars">
            <summary>
            Tokens used to enclose other tokens.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexSettings.EscapeChar">
            <summary>
            Escape char
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexSettings.WhiteSpaceChars">
            <summary>
            Chars used as white space.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexSettings.EolChars">
            <summary>
            New line tokens.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Encoders.ParameterDecoder">
            <summary>
            表示参数解码器
            </summary>
        </member>
        <member name="M:Starsoft.Core.Encoders.ParameterDecoder.#ctor(System.String)">
            <summary>
            构造参数解码器实例对象
            </summary>
            <param name="paraString"></param>
        </member>
        <member name="M:Starsoft.Core.Encoders.ParameterDecoder.GetValue``1(System.Int32)">
            <summary>
            获取指定索引的值
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="index">值参数索引</param>
            <returns>如果指定索引处的值存在且能转换为返回值类型的值，则返回转换后的值，否则返回返回值类型的默认值</returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.ParameterDecoder.GetValue``1(System.Int32,``0)">
            <summary>
            获取指定索引的值
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="index">值参数索引</param>
            <param name="defaultValue">缺省值</param>
            <returns>如果指定索引处的值存在且能转换为返回值类型的值，则返回转换后的值，否则返回指定的默认值</returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.ParameterDecoder.GetNullableValue``1(System.Int32)">
            <summary>
            获取指定索引的值
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="index">值参数索引</param>
            <returns>如果指定索引处的值存在且能转换为返回值类型的值，则返回转换后的值，否则返回<c>null</c></returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.ParameterDecoder.GetStringValue(System.Int32)">
            <summary>
            取字符类型值
            </summary>
            <param name="index">获取值的索引</param>
            <returns>返回字符类型值</returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.ParameterDecoder.ProcessSymbol(System.String)">
            <summary>
            处理特殊符号
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Encoders.ParameterDecoder.Parameters">
            <summary>
            获取参数数组
            </summary>
        </member>
        <member name="P:Starsoft.Core.Encoders.ParameterDecoder.Count">
            <summary>
            获取参数的个数
            </summary>
        </member>
        <member name="T:Starsoft.Core.Converter">
            <summary>
            Converter class for basic types.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Converter.ConvertObj``1(System.Object)">
            <summary>
            Convert to correct type.
            </summary>
            <typeparam name="T">Type of object to convert.</typeparam>
            <param name="input">Object to convert.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Starsoft.Core.Converter.ConvertTo``1(System.Object)">
            <summary>
            Convert to correct type.
            </summary>
            <typeparam name="T">Type of object whose type is to be converted.</typeparam>
            <param name="input">Object whose type is to be converted.</param>
            <returns>Type of converted object.</returns>
        </member>
        <member name="M:Starsoft.Core.Converter.ConvertTo(System.Type,System.Object)">
            <summary>
            Convert to correct type.
            </summary>
            <param name="type">Type of object whose type is to be converted.</param>
            <param name="input">Object whose type is to be converted.</param>
            <returns>Type of converted object.</returns>
        </member>
        <member name="M:Starsoft.Core.Converter.CanConvertTo``1(System.String)">
            <summary>
            Checks whether or not the object can be converted to a type.
            </summary>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if the object can be converted to a type.</returns>
        </member>
        <member name="M:Starsoft.Core.Converter.CanConvertTo(System.Type,System.String)">
            <summary>
            Checks whether or not the object can be converted to a type.
            </summary>
            <param name="type">The property represnting the type to convert 
            val to</param>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if the object can be converted to a type.</returns>
        </member>
        <member name="M:Starsoft.Core.Converter.CanConvertToCorrectType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Check to see if can convert to appropriate type
            </summary>
            <param name="propInfo">Information of property to check.</param>
            <param name="val">Object to convert to.</param>
            <returns>True if the object can be converted to the property type.</returns>
        </member>
        <member name="M:Starsoft.Core.Converter.CanConvertToCorrectType(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Checks whether or not the string can be converted to a propert type.
            </summary>
            <param name="propInfo">The property represnting the type to convert 
            val to</param>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if the string can be converted.</returns>
        </member>
        <member name="M:Starsoft.Core.Converter.ConvertToSameType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Convert the val from string type to the same time as the property.
            </summary>
            <param name="propInfo">Property representing the type to convert to</param>
            <param name="val">val to convert</param>
            <returns>converted value with the same time as the property</returns>
        </member>
        <member name="M:Starsoft.Core.Converter.IsSameType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Determine if the type of the property and the val are the same type.
            </summary>
            <param name="propInfo">Property info to check.</param>
            <param name="val">Value to check against property info.</param>
            <returns>True if the property and the value are of the same type.</returns>
        </member>
        <member name="T:Starsoft.Core.Configuration.IConfigSource">
            <summary>
            Configuration source interface for loading/viewing/saving settings.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Configuration.IConfigSection">
            <summary> 
            Base class for config settings. 
            This stores settings in 
            1. At the root level ( similiar to AppSettings ). 
            2. At a section level ( similar to GetSection("SectionName") ); 
            </summary> 
            <remarks> 
            The following properties are associated with 
            storing settings at the root level. 
            1. Count 
            </remarks> 
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSection.Get``1(System.String)">
            <summary>
            Get typed value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSection.GetDefault``1(System.String,``0)">
            <summary>
            Get key value if preset, default value otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSection.Get(System.String,System.String)">
            <summary>
            Get the section's key value.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSection.Get``1(System.String,System.String)">
            <summary>
            Get the section's key's specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSection.GetDefault``1(System.String,System.String,``0)">
            <summary>
            Get section/key value if preset, default value otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSection.GetSection(System.String)">
            <summary>
            Get the section with the name specified.
            </summary>
            <param name="sectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSection.GetSection(System.String,System.Int32)">
            <summary>
            Get sectionlist with the specified name.
            </summary>
            <param name="sectionName"></param>
            <param name="ndx"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSection.Contains(System.String,System.String)">
            <summary>
            Checks whether or not the key exists in the section.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSection.Add(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Add to value to the section/key combination.
            </summary>
            <param name="sectionName">"ApplicationSettings"</param>
            <param name="key">PageSize</param>
            <param name="val">15</param>
            <param name="overWrite"></param>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSection.Add(System.String,System.String,System.Object)">
            <summary>
            Add section key/value item.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSection.AddMulti(System.String,System.Object,System.Boolean)">
            <summary>
            Add to value to the section/key combination.
            </summary>
            <param name="key">PageSize</param>
            <param name="val">15</param>
            <param name="overWrite"></param>
        </member>
        <member name="P:Starsoft.Core.Configuration.IConfigSection.Name">
            <summary>
            The name of the this config section.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Configuration.IConfigSection.Item(System.String,System.String)">
            <summary>
            Get the section key value using the indexer.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Configuration.IConfigSection.Sections">
            <summary>
            Get the names of the sections.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSourceBase.Init">
            <summary>
            Called after construction
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSourceBase.Load">
            <summary>
            Load the config settings from the underlying datasource.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSourceBase.Save">
            <summary>
            Save the config settings to the underlying datasource.
            </summary>
        </member>
        <member name="E:Starsoft.Core.Configuration.IConfigSourceBase.OnConfigSourceChanged">
            <summary>
            Event handler when the configuration store changes.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Configuration.IConfigSourceBase.SourcePath">
            <summary>
            Name of the source.
            This cane be the file path.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSourceDynamic.Load(System.Object)">
            <summary>
            Load the config settings from the underlying datasource via full life-cycle.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSourceDynamic.Save(System.Object)">
            <summary>
            Save the config settings to the underlying datasource via full life-cycle.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSourceDynamic.OnBeforeLoad">
            <summary>
            Called before loading.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSourceDynamic.OnLoad(System.Object)">
            <summary>
            Called to load the config values.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSourceDynamic.OnAfterLoad">
            <summary>
            Called after loading.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSourceDynamic.OnBeforeSave">
            <summary>
            Called before saving.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSourceDynamic.OnSave(System.Object)">
            <summary>
            Called to save the values.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.IConfigSourceDynamic.OnAfterSave">
            <summary>
            Called after saving.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Configuration.ConfigSection">
            <summary> 
            Simple class to lookup stored configuration settings by key. 
            Also provides type conversion methods. 
            GetInt("PageSize"); 
            GetBool("IsEnabled"); 
            </summary> 
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSection.#ctor">
            <summary> 
            Allow default constructor. 
            </summary> 
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSection.#ctor(System.String)">
            <summary>
            Initialize the config section w/ the name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSection.Get``1(System.String)">
            <summary>
            Get typed root setting by string key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSection.GetDefault``1(System.String,``0)">
            <summary>
            Validate and return the default value if the key is not present.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSection.Get(System.String,System.String)">
            <summary>
            Get section key value.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSection.Get``1(System.String,System.String)">
            <summary>
            Get typed section key value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSection.GetDefault``1(System.String,System.String,``0)">
            <summary>
            Get section/key value if present, default value otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSection.GetSection(System.String)">
            <summary> 
            Get a section. 
            </summary> 
            <param name="sectionName"></param> 
            <returns></returns> 
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSection.GetSection(System.String,System.Int32)">
            <summary> 
            Get a section associated with the specified key at the specified index.
            </summary> 
            <param name="sectionName"></param>
            <param name="ndx"></param>
            <returns></returns> 
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSection.Contains(System.String,System.String)">
            <summary>
            Checks whether or not the key exists in the section.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSection.Add(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Add the key value to the section specified.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="val"></param>
            <param name="overWrite"></param>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSection.Add(System.String,System.String,System.Object)">
            <summary>
            Add the key value to the section specified.
            </summary>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSection.AddMulti(System.String,System.Object,System.Boolean)">
            <summary>
            Add key value with option of overwriting value of existing key
            or adding to a list of values associated w/ the same key.
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <param name="overWrite"></param>
        </member>
        <member name="P:Starsoft.Core.Configuration.ConfigSection.Name">
            <summary>
            Name of config section.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Configuration.ConfigSection.Item(System.String,System.String)">
            <summary> 
            Get / set the value using both the section name and key. 
            e.g. "globalsettings", "pageSize"
            </summary> 
            <param name="sectionName"></param> 
            <param name="key"></param> 
            <returns></returns> 
        </member>
        <member name="P:Starsoft.Core.Configuration.ConfigSection.Sections">
            <summary>
            The names of all the sections.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Configuration.ConfigSectionUtils">
            <summary>
            Config section utils for adding/removing from both a map and list.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSectionUtils.Add(System.Collections.IDictionary,System.String,System.Object,System.Boolean)">
            <summary>
            Add item to map checking for duplicate keys.
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="val"></param>
            <param name="overWrite"></param>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSectionUtils.Add(System.Collections.IDictionary,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Add key / value pair to the section specified.
            </summary>
            <param name="dictionary"></param>
            <param name="sectionName">E.g. "server"</param>
            <param name="key">"name"</param>
            <param name="val">"myserver01"</param>
            <param name="overWrite">true</param>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSectionUtils.Get``1(System.Collections.IDictionary,System.String,System.Int32)">
            <summary>
            Get the entry at the specified index of the multivalue list 
            associated with the key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="key">"post"</param>
            <param name="ndx">1</param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.BootStrapSupport.Task">
            <summary>
            Task class.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BootStrapSupport.Task.Name">
            <summary>
            Name of the task.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BootStrapSupport.Task.Group">
            <summary>
            Group the task belongs to.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BootStrapSupport.Task.Priority">
            <summary>
            Priority of the task.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BootStrapSupport.Task.Action">
            <summary>
            Action that the task runs.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BootStrapSupport.Task.IsEnabled">
            <summary>
            Whether or not the task is enabled.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BootStrapSupport.Task.ContinueOnError">
            <summary>
            Whether or not the task should continue if there is an error.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BootStrapSupport.Task.ExecutedOn">
            <summary>
            Time the task was run
            </summary>
        </member>
        <member name="F:Starsoft.Core.BootStrapSupport.Task.Success">
            <summary>
            Whether or not the task was successful.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BootStrapSupport.Task.Message">
            <summary>
            Error or message of the task.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BootStrapSupport.Task.Error">
            <summary>
            Exception that occurred for the task.
            </summary>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.Task.Status">
            <summary>
            Get the status of the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.BootStrapSupport.Task.Importance">
            <summary>
            Priority for ToDo items.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BootStrapSupport.Task.Importance.Low">
            <summary>
            Low priority.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BootStrapSupport.Task.Importance.Normal">
            <summary>
            Normal priority.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BootStrapSupport.Task.Importance.High">
            <summary>
            High priority.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BootStrapSupport.Task.Importance.Critical">
            <summary>
            Critical priority.
            </summary>
        </member>
        <member name="T:Starsoft.Core.BootStrapSupport.BootTask">
            <summary>
            BootTask with fluent API.
            </summary>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootTask.Named(System.String)">
            <summary>
            Sets the name of the task.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootTask.InGroup(System.String)">
            <summary>
            Set the group of the task.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootTask.MustSucceed">
            <summary>
            Sets flag indicating task Must succeed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootTask.CanFail">
            <summary>
            Sets flag indicating task can fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootTask.ActionIs(System.Action{Starsoft.Core.BootStrapSupport.IAppContext})">
            <summary>
            Sets the action of the task
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootTask.If(System.Boolean)">
            <summary>
            Enables this task if the flag is true.
            </summary>
            <param name="isEnabled"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.BootStrapSupport.BootTask.PriorityHigh">
            <summary>
            Sets the priority high.
            </summary>
            <value>The priority high.</value>
        </member>
        <member name="P:Starsoft.Core.BootStrapSupport.BootTask.PriorityLow">
            <summary>
            Sets the priority low.
            </summary>
            <value>The priority low.</value>
        </member>
        <member name="P:Starsoft.Core.BootStrapSupport.BootTask.PriorityNormal">
            <summary>
            Sets priority normal.
            </summary>
            <value>The priority normal.</value>
        </member>
        <member name="T:Starsoft.Core.Collections.DictionaryTypeConversion`1">
            <summary>
            Semi-Generic based dictionary where the values are always strings which 
            can be converted to any type using the public conversion methods such 
            as GetInt(key), GetBool(key) etc.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.#ctor">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.GetInt(`0)">
            <summary>
            Get the value associated with the key as a int.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.GetBool(`0)">
            <summary>
            Get the value associated with the key as a bool.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.GetString(`0)">
            <summary>
            Get the value associated with the key as a string.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.GetDouble(`0)">
            <summary>
            Get the value associated with the key as a double.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.GetDateTime(`0)">
            <summary>
            Get the value associated with the key as a datetime.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.GetLong(`0)">
            <summary>
            Get the value associated with the key as a long.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.ContainsKey(`0)">
            <summary>
            Determine if the underlying collection contains the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.Add(`0,System.String)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.Remove(`0)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.TryGetValue(`0,System.String@)">
            <summary>
            Try to get the value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.Add(System.Collections.Generic.KeyValuePair{`0,System.String})">
            <summary>
            Not-supported.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.Clear">
            <summary>
            Not-Supported.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.Contains(System.Collections.Generic.KeyValuePair{`0,System.String})">
            <summary>
            Determine whether key value pair is in dictionary.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.String}[],System.Int32)">
            <summary>
            Copy items to the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.Remove(System.Collections.Generic.KeyValuePair{`0,System.String})">
            <summary>
            Non-supported action.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryTypeConversion`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryTypeConversion`1.Count">
            <summary>
            Number of items in the dictionary.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryTypeConversion`1.Item(`0)">
            <summary>
            Returns the value associated with the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryTypeConversion`1.Keys">
            <summary>
            Return keys.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryTypeConversion`1.Values">
            <summary>
            Get the values.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryTypeConversion`1.IsReadOnly">
            <summary>
            Indicate read-only
            </summary>
        </member>
        <member name="T:Starsoft.Core.Reflection.ReflectionTypeChecker">
            <summary>
            Various reflection based utility methods.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionTypeChecker.CanConvertTo``1(System.String)">
            <summary>
            Checks whether or not the supplied text can be converted
            to a specific type.
            </summary>
            <typeparam name="T">Type to convert to.</typeparam>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if </returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionTypeChecker.CanConvertTo(System.Type,System.String)">
            <summary>
            Checks whether or not the supplied text can be converted
            to a specific type.
            </summary>
            <param name="type">The type to convert val to</param>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if the conversion can be performed.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionTypeChecker.CanConvertToCorrectType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Check to see if can convert to appropriate type.
            </summary>
            <param name="propInfo">Property to check.</param>
            <param name="val">Instance of object with property.</param>
            <returns>True if the conversion can be performed.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionTypeChecker.CanConvertToCorrectType(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Checks whether or not the supplied string can be converted
            to the type designated by the supplied property.
            </summary>
            <param name="propInfo">The property representing the type to convert 
            val to</param>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if the conversion can be performed.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionTypeChecker.ConvertToSameType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Convert the val from string type to the same time as the property.
            </summary>
            <param name="propInfo">Property representing the type to convert to</param>
            <param name="val">val to convert</param>
            <returns>converted value with the same time as the property</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionTypeChecker.IsSameType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Determine if the type of the property and the val are the same
            </summary>
            <param name="propInfo">Property whose type is to be compared.</param>
            <param name="val">Object whose type is to be compared.</param>
            <returns>True if the property and the object are of the same type.</returns>
        </member>
        <member name="T:Starsoft.Core.Cryptography.CryptographyUtils">
            <summary>
            Simple Cryptographic Services
            </summary>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptographyUtils.Encrypt(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Generates a cryptographic Hash Key for the provided text data.
            Basically a digital fingerprint
            </summary>
            <param name="dataToHash">text to hash</param>
            <param name="hashAlgorithm">e.g. new MD5CryptoServiceProvider();</param>
            <returns>Unique hash representing string</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptographyUtils.IsHashMatch(System.Security.Cryptography.HashAlgorithm,System.String,System.String)">
            <summary>
            Generates a cryptographic Hash Key for the provided text data.
            Basically a digital fingerprint
            </summary>
            <param name="hashAlgorithm">e.g. new MD5CryptoServiceProvider();</param>
            <param name="hashedText"></param>
            <param name="unhashedText"></param>
            <returns>Unique hash representing string</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptographyUtils.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.String,System.String)">
            <summary>
            Encrypts text with Triple DES encryption using the supplied key
            </summary>
            <param name="algorithm"></param>
            <param name="plaintext">The text to encrypt</param>
            <param name="key">Key to use for encryption</param>
            <returns>The encrypted string represented as base 64 text</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptographyUtils.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.String,System.String)">
            <summary>
            Decrypts supplied Triple DES encrypted text using the supplied key
            </summary>
            <param name="algorithm">The algorithm to use for decryption.</param>
            <param name="base64Text">Triple DES encrypted base64 text</param>
            <param name="key">Decryption Key</param>
            <returns>The decrypted string</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptographyUtils.CreateAlgo``1(System.String)">
            <summary>
            Create new instance of symmetric algorithm using reflection by
            supplying the typename.
            </summary>
            <param name="fullyQualifiedTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptographyUtils.CreateSymmAlgoTripleDes">
            <summary>
            Create triple des symmetric algorithm.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptographyUtils.CreateHashAlgoMd5">
            <summary>
            Create MD5 hash algorithm.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Tuple`2">
            <summary>
            表示 2 元组，即二元组。
            </summary>
            <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
            <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
        </member>
        <member name="M:Starsoft.Core.Tuple`2.#ctor(`0,`1)">
            <summary>
            初始化 Starsoft.Core.Tuple&lt;T1,T2&gt; 类的新实例。
            </summary>
            <param name="item1">此元组的第一个组件的值。</param>
            <param name="item2">此元组的第二个组件的值。</param>
        </member>
        <member name="M:Starsoft.Core.Tuple`2.Equals(System.Object)">
            <summary>
            返回一个值，该值指示当前的 Starsoft.Core.Tuple&lt;T1,T2&gt; 对象是否与指定对象相等。
            </summary>
            <param name="obj">与该实例进行比较的对象。</param>
            <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Starsoft.Core.Tuple`2.Equals(Starsoft.Core.Tuple{`0,`1})">
            <summary>
            返回一个值，该值指示当前的 Starsoft.Core.Tuple&lt;T1,T2&gt; 对象是否与指定对象相等。
            </summary>
            <param name="other">与该实例进行比较的对象。</param>
            <returns>如果当前实例等于指定对象，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Starsoft.Core.Tuple`2.GetHashCode">
            <summary>
            返回当前 Starsoft.Core.Tuple&lt;T1,T2&gt; 对象的哈希代码。
            </summary>
            <returns>32 位带符号整数哈希代码。</returns>
        </member>
        <member name="M:Starsoft.Core.Tuple`2.ToString">
            <summary>
            返回一个字符串，该字符串表示此 Starsoft.Core.Tuple&lt;T1,T2&gt; 实例的值。
            </summary>
            <returns>此 Starsoft.Core.Tuple&lt;T1,T2&gt; 对象的字符串表示形式。</returns>
        </member>
        <member name="P:Starsoft.Core.Tuple`2.Item1">
            <summary>
            获取当前 Starsoft.Core.Tuple&lt;T1,T2&gt; 对象的第一个分量的值。
            </summary>
        </member>
        <member name="P:Starsoft.Core.Tuple`2.Item2">
            <summary>
            获取当前 System.Tuple&lt;T1,T2&gt; 对象的第二个分量的值。
            </summary>
        </member>
        <member name="T:Starsoft.Core.Notifications.NotificationQueueInMemory">
            <summary>
            Queue to store the notification messages.
            This is the default implementation to store them in memory
            rather than in some persistant storage (e.g. database ).
            </summary>
        </member>
        <member name="T:Starsoft.Core.Queue.QueueProcessor`1">
            <summary>
            Controlls the processing of the notification tasks.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Queue.IQueueProcessor`1">
            <summary>
            Queue processing interface w/ specific type.
            </summary>
            <typeparam name="T">Type of items to store in queue.</typeparam>
        </member>
        <member name="T:Starsoft.Core.Queue.IQueueProcessor">
            <summary>
            Queue processing interface.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Queue.IQueueProcessor.Process">
            <summary>
            Processes this instance.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Queue.IQueueProcessor.GetStatus">
            <summary>
            Gets information about the current state.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Queue.IQueueProcessor.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Starsoft.Core.Queue.IQueueProcessor.IsBusy">
            <summary>
            Gets a value indicating whether this instance is busy.
            </summary>
            <value><c>true</c> if this instance is busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Starsoft.Core.Queue.IQueueProcessor.IsIdle">
            <summary>
            Gets a value indicating whether this instance is idle.
            </summary>
            <value><c>true</c> if this instance is idle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Starsoft.Core.Queue.IQueueProcessor.IsStopped">
            <summary>
            Gets a value indicating whether this instance is stopped.
            </summary>
            <value>
            	<c>true</c> if this instance is stopped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Queue.IQueueProcessor.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="M:Starsoft.Core.Queue.IQueueProcessor`1.Enqueue(`0)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.IQueueProcessor`1.Dequeue">
            <summary>
            Dequeues a single item from the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Queue.IQueueProcessor`1.Dequeue(System.Int32)">
            <summary>
            Dequeues the specified number to dequeue.
            </summary>
            <param name="numberToDequeue">The number to dequeue.</param>
            <returns>List of dequeued items.</returns>
        </member>
        <member name="P:Starsoft.Core.Queue.IQueueProcessor`1.SyncRoot">
            <summary>
            Gets the sync root.
            </summary>
            <value>The sync root.</value>
        </member>
        <member name="M:Starsoft.Core.Queue.QueueProcessor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Starsoft.Core.Queue.QueueProcessor`1"/> class.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Queue.QueueProcessor`1.#ctor(System.Action{System.Collections.Generic.IList{`0}})">
            <summary>
            Intialize w/ a specific handler.
            </summary>
            <param name="handler">Action to be called on item dequeue.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.QueueProcessor`1.#ctor(System.Int32,System.Action{System.Collections.Generic.IList{`0}})">
            <summary>
            Intialize w/ a specific handler.
            </summary>
            <param name="numberOfItemsToProcessPerDequeue">Number of items to process per dequeue.</param>
            <param name="handler">Action to be called on item dequeue.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.QueueProcessor`1.Enqueue(`0)">
            <summary>
            Add a message to the queue.
            </summary>
            <param name="item">Item to enqueue.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.QueueProcessor`1.Dequeue">
            <summary>
            Dequeues the specified number to dequeue.
            </summary>
            <returns>Dequeued item.</returns>
        </member>
        <member name="M:Starsoft.Core.Queue.QueueProcessor`1.Dequeue(System.Int32)">
            <summary>
            Dequeues the specified number to dequeue.
            </summary>
            <param name="numberToDequeue">The number to dequeue.</param>
            <returns>List of dequeued items.</returns>
        </member>
        <member name="M:Starsoft.Core.Queue.QueueProcessor`1.Process">
            <summary>
            Processes this instance.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Queue.QueueProcessor`1.GetStatus">
            <summary>
            Get the state of the queue.
            </summary>
            <returns>Status of queue.</returns>
        </member>
        <member name="M:Starsoft.Core.Queue.QueueProcessor`1.Process(System.Collections.Generic.IList{`0})">
            <summary>
            Processes the specified items to process.
            </summary>
            <param name="itemsToProcess">The items to process.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.QueueProcessor`1.DequeueInternal(System.Int32)">
            <summary>
            Dequeues the internal.
            </summary>
            <param name="numberToDequeue">The number to dequeue.</param>
            <returns>List of dequeued items.</returns>
        </member>
        <member name="M:Starsoft.Core.Queue.QueueProcessor`1.UpdateState(Starsoft.Core.Queue.QueueProcessState,System.Boolean)">
            <summary>
            Updates the state.
            </summary>
            <param name="newState">The new state.</param>
            <param name="performLock">if set to <c>true</c> [perform lock].</param>
        </member>
        <member name="P:Starsoft.Core.Queue.QueueProcessor`1.SyncRoot">
            <summary>
            Gets the sync root.
            </summary>
            <value>The sync root.</value>
        </member>
        <member name="P:Starsoft.Core.Queue.QueueProcessor`1.NumberToProcessPerDequeue">
            <summary>
            Gets or sets the number to process per dequeue.
            </summary>
            <value>The number to process per dequeue.</value>
        </member>
        <member name="P:Starsoft.Core.Queue.QueueProcessor`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Starsoft.Core.Queue.QueueProcessor`1.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Starsoft.Core.Queue.QueueProcessor`1.IsIdle">
            <summary>
            Gets a value indicating whether this instance is idle.
            </summary>
            <value><c>true</c> if this instance is idle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Starsoft.Core.Queue.QueueProcessor`1.IsStopped">
            <summary>
            Gets a value indicating whether this instance is stopped.
            </summary>
            <value>
            	<c>true</c> if this instance is stopped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Queue.QueueProcessor`1.IsBusy">
            <summary>
            Gets a value indicating whether this instance is busy.
            </summary>
            <value><c>true</c> if this instance is busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Starsoft.Core.Notifications.NotificationQueueInMemory.#ctor(Starsoft.Core.Notifications.NotificationSettings,Starsoft.Core.EmailSupport.IEmailService,Starsoft.Core.Notifications.INotificationDefinitions)">
            <summary>
            Initialize
            </summary>
            <param name="config"></param>
            <param name="emailService"></param>
            <param name="messageDefs"></param>
        </member>
        <member name="M:Starsoft.Core.Notifications.NotificationQueueInMemory.Process(System.Collections.Generic.IList{Starsoft.Core.EmailSupport.NotificationMessage})">
            <summary>
            Override the process method to handle notification messages.
            </summary>
            <param name="itemsToProcess"></param>
        </member>
        <member name="T:Starsoft.Core.Notifications.NotificationItemProcessor">
            <summary>
            Class that actually generates the messages and
            sends them out.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Notifications.NotificationItemProcessor.#ctor(Starsoft.Core.Notifications.NotificationSettings,Starsoft.Core.EmailSupport.IEmailService,Starsoft.Core.Notifications.INotificationDefinitions)">
            <summary>
            Notification processor.
            </summary>
            <param name="config"></param>
            <param name="emailService"></param>
            <param name="messageDefs"></param>
        </member>
        <member name="M:Starsoft.Core.Notifications.NotificationItemProcessor.Process(Starsoft.Core.EmailSupport.NotificationMessage)">
            <summary>
            Processes the notification message. Either just sends the data or transforms the
            data and then sends it.
            </summary>
            <param name="currentMessage"></param>
        </member>
        <member name="M:Starsoft.Core.Notifications.NotificationItemProcessor.GetNextId">
            <summary>
            Simply used for generating unique filenames for testing purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Notifications.NotificationItemProcessor.OutputContent(Starsoft.Core.EmailSupport.NotificationMessage,System.String)">
            <summary>
            Write the message to file for debugging purposes.
            </summary>
            <param name="message"></param>
            <param name="htmlBody"></param>
        </member>
        <!-- 对于成员“T:Starsoft.Core.Logging.LogInstance”忽略有格式错误的 XML 注释 -->
        <member name="T:Starsoft.Core.Logging.LogBase">
            <summary>
            Provides basic methods for implementation classes,
            including the Wrapper class around Log4Net.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Logging.ILog">
            <summary>
            Simple interface for logging information.
            This extends the common Log4net interface by 
            
            1. Taking additional argument as an object array
            2. Exposing a simple Log method that takes in the loglevel.
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Log(Starsoft.Core.Logging.LogEvent)">
            <summary>
            Logs the specified level.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Warn(System.Object)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Logs a warning message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Warn(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs a warning message with exception and additional arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Additional arguments.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Error(System.Object)">
            <summary>
            Logs a Error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Error(System.Object,System.Exception)">
            <summary>
            Logs a Error message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Error(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs an error message with the exception additional arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Debug(System.Object)">
            <summary>
            Logs a Debug message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Logs a Debug message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Debug(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs a debug message with the exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Fatal(System.Object)">
            <summary>
            Logs a Fatal message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Logs a Fatal message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Fatal(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs a fatal message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Info(System.Object)">
            <summary>
            Logs a Info message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Info(System.Object,System.Exception)">
            <summary>
            Logs a Info message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Info(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs a info message with the arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Message(System.Object)">
            <summary>
            Logs a Message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Message(System.Object,System.Exception)">
            <summary>
            Logs a Message with exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Message(System.Object,System.Exception,System.Object[])">
            <summary>
            Messages should always get logged.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Log(Starsoft.Core.Logging.LogLevel,System.Object)">
            <summary>
            Logs a Message.
            </summary>
            <param name="level"></param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Log(Starsoft.Core.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Logs a Message with exception.
            </summary>
            <param name="level"></param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Log(Starsoft.Core.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Messages should always get logged.
            </summary>
            <param name="level"></param>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
            <param name="args">The args.</param>        
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.IsEnabled(Starsoft.Core.Logging.LogLevel)">
            <summary>
            Is the level enabled.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.BuildLogEvent(Starsoft.Core.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Builds a log event from the parameters supplied.
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="ex"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.Flush">
            <summary>
            Flushes the buffers.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.ILog.ShutDown">
            <summary>
            Shutdown the logger.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Logging.ILog.Name">
            <summary>
            Get the name of the logger.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Logging.ILog.Level">
            <summary>
            Get / set the loglevel.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Logging.ILog.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this instance is debug enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Logging.ILog.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this instance is error enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Logging.ILog.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this instance is fatal enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is fatal enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Logging.ILog.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this instance is info enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is info enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Logging.ILog.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this instance is warn enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is warn enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.#ctor">
            <summary>
            Default logger.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.#ctor(System.Type)">
            <summary>
            Initialize logger with default settings.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.#ctor(System.String)">
            <summary>
            Initialize logger with default settings.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.IsEnabled(Starsoft.Core.Logging.LogLevel)">
            <summary>
            Whether or not the level specified is enabled.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Log(Starsoft.Core.Logging.LogEvent)">
            <summary>
            Logs the event.
            </summary>
            <remarks>This is the method to override in any logger that extends this class.</remarks>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Flush">
            <summary>
            Flush the log entries to output.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Warn(System.Object)">
            <summary>
            Logs as Warn.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Warn(System.Object,System.Exception)">
            <summary>
            Logs as Warn.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Warn(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs a warning message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Error(System.Object)">
            <summary>
            Logs as Error.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Error(System.Object,System.Exception)">
            <summary>
            Logs as Error.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Error(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Debug(System.Object)">
            <summary>
            Logs as Debug.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Debug(System.Object,System.Exception)">
            <summary>
            Logs as Debug.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Debug(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message as debug.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Fatal(System.Object)">
            <summary>
            Logs as Fatal.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Fatal(System.Object,System.Exception)">
            <summary>
            Logs as Fatal.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Fatal(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message as fatal.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Info(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Info(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Info(System.Object,System.Exception,System.Object[])">
            <summary>
            Infoes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Message(System.Object)">
            <summary>
            Logs as Message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Message(System.Object,System.Exception)">
            <summary>
            Logs as Message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Message(System.Object,System.Exception,System.Object[])">
            <summary>
            Infoes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Log(Starsoft.Core.Logging.LogLevel,System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="level"></param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Log(Starsoft.Core.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="level"></param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.Log(Starsoft.Core.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Infoes the specified message.
            </summary>
            <param name="level"></param>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.InternalLog(Starsoft.Core.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="ex"></param>
            <param name="args"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.ShutDown">
            <summary>
            Shutdown logger.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.BuildLogEvent(Starsoft.Core.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Construct the logevent using the values supplied.
            Fills in other data values in the log event.
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="ex"></param>
            <param name="args"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.BuildMessage(Starsoft.Core.Logging.LogEvent)">
            <summary>
            Builds the log message using message and arguments.
            </summary>
            <param name="logEvent"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.ExecuteRead(Starsoft.Core.ActionCall)">
            <summary>
            Exectutes the action under a read operation after
            aquiring the reader lock.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.ExecuteWrite(Starsoft.Core.ActionCall)">
            <summary>
            Exectutes the action under a write operation after
            aquiring the writer lock.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.AcquireReaderLock">
            <summary>
            Gets the reader lock.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.ReleaseReaderLock">
            <summary>
            Release the reader lock.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.AcquireWriterLock">
            <summary>
            Acquire the writer lock.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogBase.ReleaseWriterLock">
            <summary>
            Release the writer lock.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Logging.LogBase.Name">
            <summary>
            Name of this logger.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Logging.LogBase.Parent">
            <summary>
            Get / set the parent of this logger.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Logging.LogBase.Settings">
            <summary>
            Log settings.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Logging.LogBase.Level">
            <summary>
            Log level.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Logging.LogBase.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this instance is debug enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Logging.LogBase.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this instance is info enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Logging.LogBase.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this instance is warn enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Logging.LogBase.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this instance is error enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Logging.LogBase.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this instance is fatal enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is fatal enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Logging.LogBase.Item(System.String)">
            <summary>
            Get a logger by it's name.
            </summary>
            <param name="loggerName"></param>
        </member>
        <member name="P:Starsoft.Core.Logging.LogBase.Item(System.Int32)">
            <summary>
            Get logger at the specified index.
            This is a single logger and this call will always return 
            referece to self.
            </summary>
            <param name="logIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Logging.LogInstance.#ctor(System.String,System.Type)">
            <summary>
            Initialize with reference to the actually logger that does the logging
            and the calling type of the logger.
            </summary>
            <param name="loggerName"></param>
            <param name="callingType"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogInstance.Log(Starsoft.Core.Logging.LogEvent)">
            <summary>
            Log the event to file.
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="T:Starsoft.Core.Collections.HashSet`1">
            <summary>
            表示值的集
            </summary>
            <typeparam name="T">哈希集中的元素类型</typeparam>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.#ctor">
            <summary>
            初始化 Starsoft.Core.Collections.HashSet&lt;T&gt; 类的一个新实例，该实例为空并使用集类型的默认相等比较器
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化 Starsoft.Core.Collections.HashSet&lt;T&gt; 类的一个新实例，该实例使用集类型的默认相等比较器，包含从指定的集合复制的元素，并且有足够的容量容纳所复制的这些元素
            </summary>
            <param name="collection">其元素被复制到新集中的集合</param>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化 Starsoft.Core.Collections.HashSet&lt;T&gt; 类的一个新实例，该实例为空并使用集类型的指定相等比较器
            </summary>
            <param name="comparer">
            在比较集中的值时使用的 System.Collections.Generic.IEqualityComparer&lt;T&gt; 实现，
            或为 null 以使用集类型的默认System.Collections.Generic.EqualityComparer&lt;T&gt; 实现
            </param>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化 Starsoft.Core.Collections.HashSet&lt;T&gt; 类的一个新实例，该实例使用集类型的指定相等比较器，包含从指定的集合复制的元素，并且有足够的容量容纳所复制的这些元素
            </summary>
            <param name="collection">其元素被复制到新集中的集合</param>
            <param name="comparer">
            在比较集中的值时使用的 System.Collections.Generic.IEqualityComparer&lt;T&gt; 实现，
            或为 null 以使用集类型的默认System.Collections.Generic.EqualityComparer&lt;T&gt; 实现
            </param>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.Add(`0)">
            <summary>
            将指定项添加到集合
            </summary>
            <param name="item">要添加到集合中的对象</param>
            <returns>如果添加成功则为 true；否则为 false</returns>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改当前的 Starsoft.Core.Collections.HashSet&lt;T&gt; 对象，以包含该对象本身和指定集合中存在的所有元素
            </summary>
            <param name="other">要与当前的 Starsoft.Core.Collections.HashSet&lt;T&gt; 对象进行比较的集合</param>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.IntersectWith(Starsoft.Core.Collections.HashSet{`0})">
            <summary>
            修改当前的 Starsoft.Core.Collections.HashSet&lt;T&gt; 对象，以仅包含该对象和指定集合中存在的元素
            </summary>
            <param name="other">要与当前的 Starsoft.Core.Collections.HashSet&lt;T&gt; 对象进行比较的集合</param>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.ExceptWith(Starsoft.Core.Collections.HashSet{`0})">
            <summary>
            从当前 Starsoft.Core.Collections.HashSet&lt;T&gt; 对象中移除指定集合中的所有元素
            </summary>
            <param name="other">要从 Starsoft.Core.Collections.HashSet&lt;T&gt; 对象中移除的项的集合</param>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.ToArray">
            <summary>
            将 Starsoft.Core.Collections.HashSet&lt;T&gt; 的元素复制到新数组中
            </summary>
            <returns>一个数组，它包含 Starsoft.Core.Collections.HashSet&lt;T&gt; 的元素的副本</returns>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            将指定项添加到集合
            </summary>
            <param name="item">要添加到集合中的对象</param>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.Clear">
            <summary>
            从集合中移除所有项
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.Contains(`0)">
            <summary>
            确定集合是否包含指定的项
            </summary>
            <param name="item">要在集合中定位的对象</param>
            <returns>如果在集合中找到了 item，则为 true；否则为 false</returns>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            从特定的索引位置开始，将集合的元素复制到一个数组中
            </summary>
            <param name="array">作为集合中元素的复制目标位置的一维数组。该数组必须具有从零开始的索引</param>
            <param name="arrayIndex">array 中从零开始的索引，在此处开始复制。</param>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.Remove(`0)">
            <summary>
            从集合中移除元素
            </summary>
            <param name="item">要从集合中移除的对象</param>
            <returns>如果从集合中成功移除了 item，则为 true；否则为 false。如果在集合中找不到 item，则此方法也会返回 false</returns>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.GetEnumerator">
            <summary>
            返回一个可用于循环访问集合的枚举器
            </summary>
            <returns>一个可用于循环访问集合的枚举器</returns>
        </member>
        <member name="M:Starsoft.Core.Collections.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个可用于循环访问集合的枚举器
            </summary>
            <returns>一个可用于循环访问集合的枚举器</returns>
        </member>
        <member name="P:Starsoft.Core.Collections.HashSet`1.Count">
            <summary>
            获取集合中的元素数
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.HashSet`1.IsReadOnly">
            <summary>
            获取一个值，该值指示该集合是否为只读集合
            </summary>
        </member>
        <member name="T:Starsoft.Core.Encoders.UrlBase64Encoder">
            Convert binary data to and from UrlBase64 encoding.  This is identical to
            Base64 encoding, except that the padding character is "." and the other 
            non-alphanumeric characters are "-" and "_" instead of "+" and "/".
            <p>
            The purpose of UrlBase64 encoding is to provide a compact encoding of binary
            data that is safe for use as an URL parameter. Base64 encoding does not
            produce encoded values that are safe for use in URLs, since "/" can be 
            interpreted as a path delimiter; "+" is the encoded form of a space; and
            "=" is used to separate a name from the corresponding value in an URL 
            parameter.
            </p>
        </member>
        <member name="T:Starsoft.Core.Encoders.Base64Encoder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starsoft.Core.Encoders.IEncoder">
            Encode and decode byte arrays (typically from binary to 7-bit ASCII
            encodings).
        </member>
        <member name="M:Starsoft.Core.Encoders.IEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="off"></param>
            <param name="length"></param>
            <param name="outStream"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.IEncoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="off"></param>
            <param name="length"></param>
            <param name="outStream"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.IEncoder.DecodeString(System.String,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="outStream"></param>
            <returns></returns>
        </member>
        <member name="F:Starsoft.Core.Encoders.Base64Encoder.encodingTable">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.Encoders.Base64Encoder.padding">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.Encoders.Base64Encoder.decodingTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Encoders.Base64Encoder.InitialiseDecodingTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Encoders.Base64Encoder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Encoders.Base64Encoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             encode the input data producing a base 64 output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Starsoft.Core.Encoders.Base64Encoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             decode the base 64 encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Starsoft.Core.Encoders.Base64Encoder.DecodeString(System.String,System.IO.Stream)">
             decode the base 64 encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Starsoft.Core.Encoders.UrlBase64Encoder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starsoft.Core.Encoders.BufferedEncoder">
            <summary>
            A class that allows encoding of data using a specific encoder to be processed in chunks.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Encoders.BufferedEncoder.#ctor(Starsoft.Core.Encoders.ITranslator,System.Int32)">
            <summary>
            Create.
            </summary>
            <param name="translator">The translator to use.</param>
            <param name="bufferSize">Size of the chunks.</param>
        </member>
        <member name="M:Starsoft.Core.Encoders.BufferedEncoder.ProcessByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Process one byte of data.
            </summary>
            <param name="input">The byte.</param>
            <param name="outBytes">An array to store output in.</param>
            <param name="outOff">Offset within output array to start writing from.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.BufferedEncoder.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process data from a byte array.
            </summary>
            <param name="input">Input data Byte array containing data to be processed.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="len">Amount of input data to be processed.</param>
            <param name="outBytes">Output data array.</param>
            <param name="outOff">Offset within output data array to start writing to.</param>
            <returns>The amount of data written.</returns>
        </member>
        <member name="T:Starsoft.Core.Notifications.NotificationContext">
            <summary>
            Notification context.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Notifications.NotificationContext.Values">
            <summary>
            Values.
            These are used to replace the place holders in the template files.
            e.g.
            key = "message.to" replaces "${message.to}" 
            in the template file with the value associated with "message.to" 
            in this dictionary.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Notifications.NotificationContext.#ctor">
            <summary>
            Allow default initialization.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Notifications.NotificationContext.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initialize using supplied values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:Starsoft.Core.ValidationEvent">
            <summary>
            Encapsulate all the various inputs for performing validation on an object.
            </summary>
        </member>
        <member name="F:Starsoft.Core.ValidationEvent.Target">
            <summary>
            The object to validate.
            </summary>
        </member>
        <member name="F:Starsoft.Core.ValidationEvent.Results">
            <summary>
            The results to store validation errors.
            </summary>
        </member>
        <member name="F:Starsoft.Core.ValidationEvent.Context">
            <summary>
            Other contextual data that could be supplied.
            </summary>
        </member>
        <member name="M:Starsoft.Core.ValidationEvent.TargetT``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.ValidationEvent.#ctor(System.Object,Starsoft.Core.IValidationResults,System.Object)">
            <summary>
            Initialize data.
            </summary>
            <param name="target"></param>
            <param name="results"></param>
            <param name="context"></param>
        </member>
        <member name="M:Starsoft.Core.ValidationEvent.#ctor(System.Object,Starsoft.Core.IValidationResults)">
            <summary>
            Initialize data.
            </summary>
            <param name="target"></param>
            <param name="results"></param>
        </member>
        <member name="T:Starsoft.Core.IValidationResults">
            <summary>
            Interface for validation results.
            </summary>
        </member>
        <member name="T:Starsoft.Core.IErrors">
            <summary>
            Interface for message storage for errors.
            </summary>
        </member>
        <member name="T:Starsoft.Core.IMessages">
            <summary>
            Interface for storing messages by both list and key/value.
            </summary>
        </member>
        <member name="M:Starsoft.Core.IMessages.Add(System.String)">
            <summary>
            Add a message
            </summary>
            <param name="message">Message to add.</param>
        </member>
        <member name="M:Starsoft.Core.IMessages.Add(System.String,System.String)">
            <summary>
            Add a message by key/value pair.
            </summary>
            <param name="key">Key to message.</param>
            <param name="message">Message to add.</param>
        </member>
        <member name="M:Starsoft.Core.IMessages.Clear">
            <summary>
            Clear all the messages.
            </summary>
        </member>
        <member name="M:Starsoft.Core.IMessages.CopyTo(Starsoft.Core.IMessages)">
            <summary>
            Copy all the messages to the instance supplied.
            </summary>
            <param name="messages">Messages to copy.</param>
        </member>
        <member name="M:Starsoft.Core.IMessages.Each(Starsoft.Core.ActionCall{System.String,System.String})">
            <summary>
            Iterate through all the key/value messages.
            </summary>
            <param name="callback">Callback to call for each key/value pair.</param>
        </member>
        <member name="M:Starsoft.Core.IMessages.EachFull(System.Action{System.String})">
            <summary>
            Iterate through all the messages.
            </summary>
            <param name="callback">Callback to call for each message.</param>
        </member>
        <member name="M:Starsoft.Core.IMessages.Message">
            <summary>
            Builds a single message of all the messages separated by newline.
            </summary>
            <returns>String with all messages.</returns>
        </member>
        <member name="M:Starsoft.Core.IMessages.Message(System.String)">
            <summary>
            Builds a single message of all the messages separated by separator supplied.
            </summary>
            <param name="separator">Separator to use.</param>
            <returns>String with all messages separated.</returns>
        </member>
        <member name="M:Starsoft.Core.IMessages.On(System.String)">
            <summary>
            Gets the message associated w/ the specified key.
            </summary>
            <param name="key">Key to message.</param>
            <returns>Message associated with key.</returns>
        </member>
        <member name="M:Starsoft.Core.IMessages.On">
            <summary>
            Get all the messages.
            </summary>
            <returns>List of messages.</returns>
        </member>
        <member name="P:Starsoft.Core.IMessages.Count">
            <summary>
            Get count of all the messages.
            </summary>
        </member>
        <member name="P:Starsoft.Core.IMessages.HasAny">
            <summary>
            Whether or not there are any messages in this instance.
            </summary>
        </member>
        <member name="P:Starsoft.Core.IMessages.MessageList">
            <summary>
            Internal list of non-key/value based messages.
            </summary>
        </member>
        <member name="P:Starsoft.Core.IMessages.MessageMap">
            <summary>
            Internal map of the key/value messages.
            </summary>
        </member>
        <member name="P:Starsoft.Core.IErrors.ErrorList">
            <summary>
            Get/set the list of messages.
            </summary>
        </member>
        <member name="P:Starsoft.Core.IErrors.ErrorMap">
            <summary>
            Get/set the list of mappings.
            </summary>
        </member>
        <member name="P:Starsoft.Core.IValidationResults.IsValid">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starsoft.Core.ValidationResults">
            <summary> 
            Stores validation results. 
            </summary> 
            <remarks>NOTE : Errors could be a read-only collection. 
            </remarks> 
        </member>
        <member name="T:Starsoft.Core.Errors">
            <summary>
            A message storage class for storing errors by both simple string and by key/value string pairs.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Messages">
            <summary>
            Class to store messages by key/value and by a simple list of messages.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Messages._messageMap">
            <summary>
            The internal map of key/value based messages.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Messages._messageList">
            <summary>
            Internal list of messages.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Messages.Add(System.String,System.String)">
            <summary>
            Adds an error associated with the key.
            </summary>
            <param name="key">The key.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:Starsoft.Core.Messages.Add(System.String)">
            <summary>
            Adds the specified error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:Starsoft.Core.Messages.Each(Starsoft.Core.ActionCall{System.String,System.String})">
            <summary>
            Iterates over the error map and calls the callback
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Starsoft.Core.Messages.EachFull(System.Action{System.String})">
            <summary>
            Iterates over the error map and error list and calls the callback.
            Errormap entries are combined.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Starsoft.Core.Messages.Message">
            <summary>
            Builds a full error message of error map and list using NewLine as a separator between errors.
            </summary>
            <returns>Full error message.</returns>
        </member>
        <member name="M:Starsoft.Core.Messages.Message(System.String)">
            <summary>
            Builds a complete error message using the supplied separator for each error.
            </summary>
            <param name="separator">Separator to use.</param>
            <returns>Full error message with lines separated.</returns>
        </member>
        <member name="M:Starsoft.Core.Messages.Clear">
            <summary>
            Clears all the errors.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Messages.On(System.String)">
            <summary>
            Gets the error on the specified error key.
            </summary>
            <param name="key">The key.</param>
            <returns>Message corresponding to the key.</returns>
        </member>
        <member name="M:Starsoft.Core.Messages.On">
            <summary>
            Gets all the errors
            </summary>
            <returns>List of all errors.</returns>
        </member>
        <member name="M:Starsoft.Core.Messages.CopyTo(Starsoft.Core.IMessages)">
            <summary>
            Copies all messages from this instance over to the supplied instance.
            </summary>
            <param name="messages">The messages.</param>
        </member>
        <member name="P:Starsoft.Core.Messages.Count">
            <summary>
            Gets the number of errors.
            </summary>
            <value>The number of errors.</value>
        </member>
        <member name="P:Starsoft.Core.Messages.HasAny">
            <summary>
            Gets a value indicating whether this instance has any errors.
            </summary>
            <value><c>true</c> if this instance has any errors; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Starsoft.Core.Messages.MessageList">
            <summary>
            Gets or sets the error list.
            </summary>
            <value>The error list.</value>
        </member>
        <member name="P:Starsoft.Core.Messages.MessageMap">
            <summary>
            Gets or sets the error map.
            </summary>
            <value>The error map.</value>
        </member>
        <member name="P:Starsoft.Core.Errors.ErrorList">
            <summary>
            Gets or sets the error list.
            </summary>
            <value>The error list.</value>
        </member>
        <member name="P:Starsoft.Core.Errors.ErrorMap">
            <summary>
            Gets or sets the error map.
            </summary>
            <value>The error map.</value>
        </member>
        <member name="F:Starsoft.Core.ValidationResults.Empty">
            <summary>
            Null object.
            </summary>
        </member>
        <member name="P:Starsoft.Core.ValidationResults.IsValid">
            <summary> 
            Passed validation ? 
            </summary> 
        </member>
        <member name="T:Starsoft.Core.IValidatorNonStateful">
            <summary>
            Interface for a validator that does not store any stateful instance data.
            This allows for the entire validation to be done in one method.
            </summary>
        </member>
        <member name="M:Starsoft.Core.IValidatorNonStateful.ValidateTarget(System.Object)">
            <summary>
            Validates <paramref name="target"/> and returns a new <see cref="T:Starsoft.Core.ValidationResults"/> with
            all the <see cref="T:Starsoft.Core.ValidationResults"/> entries that represent the validation failures.
            </summary>
            <param name="target">The object to validate.</param>
            <returns>The results of the validation.</returns>
        </member>
        <member name="M:Starsoft.Core.IValidatorNonStateful.Validate(System.Object,Starsoft.Core.IValidationResults)">
            <summary>
            Validates <paramref name="target"/> and adds <see cref="T:Starsoft.Core.ValidationResults"/> entires 
            representing failures to the supplied <paramref name="results"/>.
            </summary>
            <param name="target">The object to validate.</param>
            <param name="results">The <see cref="T:Starsoft.Core.ValidationResults"/> where the validation failures
            should be collected.</param>
        </member>
        <member name="M:Starsoft.Core.IValidatorNonStateful.Validate(Starsoft.Core.ValidationEvent)">
            <summary>
            Validate using the supplied validation event that encapsulates both the target and results.
            </summary>
            <param name="validationEvent"></param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.IValidatorStateful">
            <summary>
            Interface for a class that can serve as a validator.
            This interface is stateful which means it stores the last validation result,
            the object being validated.
            </summary>
        </member>
        <member name="M:Starsoft.Core.IValidatorStateful.Validate">
            <summary>
            Performs validation on data provided during initialization/construction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.IValidatorStateful.Validate(Starsoft.Core.IValidationResults)">
            <summary>
            Validate using the results collection provided.
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.IValidatorStateful.Clear">
            <summary>
            Clear the results.
            </summary>
        </member>
        <member name="P:Starsoft.Core.IValidatorStateful.Target">
            <summary>
            The object to validate.
            </summary>
        </member>
        <member name="P:Starsoft.Core.IValidatorStateful.Message">
            <summary>
            Message to use for a validation failure.
            </summary>
        </member>
        <member name="P:Starsoft.Core.IValidatorStateful.IsValid">
            <summary>
            method to determine if validation has passed
            or failed for the object(s) being validated.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.IValidatorStateful.Results">
            <summary>
            The last validation results.
            </summary>
        </member>
        <member name="T:Starsoft.Core.IValidator">
            <summary>
            Interface for a validator that supports both stateful and non-stateful
            validation.
            </summary>
        </member>
        <member name="T:Starsoft.Core.IValidatorWithRules">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.IValidatorWithRules.Add(Starsoft.Core.FuncCall{Starsoft.Core.ValidationEvent,System.Boolean})">
            <summary>
            
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Starsoft.Core.IValidatorWithRules.Add(System.String,Starsoft.Core.FuncCall{Starsoft.Core.ValidationEvent,System.Boolean})">
            <summary>
            
            </summary>
            <param name="ruleName"></param>
            <param name="rule"></param>
        </member>
        <member name="M:Starsoft.Core.IValidatorWithRules.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="ndx"></param>
        </member>
        <member name="M:Starsoft.Core.IValidatorWithRules.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="ruleNname"></param>
        </member>
        <member name="P:Starsoft.Core.IValidatorWithRules.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.IValidatorWithRules.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="ndx"></param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.ValidationRuleDef">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.ValidationRuleDef.Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.ValidationRuleDef.Rule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starsoft.Core.Cryptography.ICrypto">
            <summary>
            Cryptography interface to encrypt and decrypt strings.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Cryptography.ICrypto.Encrypt(System.String)">
            <summary>
            Encrypts a string.
            </summary>
            <param name="plaintext"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.ICrypto.Decrypt(System.String)">
            <summary>
            Decrypt the encrypted text.
            </summary>
            <param name="base64Text">The encrypted base64 text</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.ICrypto.IsMatch(System.String,System.String)">
            <summary>
            Determine if encrypted text can be matched to unencrypted text.
            </summary>
            <param name="encrypted"></param>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Cryptography.ICrypto.Settings">
            <summary>
            Options for encryption.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Cryptography.CryptoConfig">
            <summary>
            Settings for the encryption.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoConfig.#ctor">
            <summary>
            encryption option
            </summary>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoConfig.#ctor(System.Boolean,System.String)">
            <summary>
            encryption options
            </summary>
            <param name="encrypt"></param>
            <param name="key"></param>
        </member>
        <member name="P:Starsoft.Core.Cryptography.CryptoConfig.Encrypt">
            <summary>
            Whether or not to encrypt;
            Primarily used for unit testing.
            Default is to encrypt.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Cryptography.CryptoConfig.InternalKey">
            <summary>
            Key used to encrypt a word.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Cryptography.Crypto">
            <summary>
            Cryptography service to encrypt and decrypt strings.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Cryptography.Crypto.#cctor">
            <summary>
            Create default instance of symmetric cryptographer.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Cryptography.Crypto.Init(Starsoft.Core.Cryptography.ICrypto)">
            <summary>
            Initialize to new provider.
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Starsoft.Core.Cryptography.Crypto.Encrypt(System.String)">
            <summary>
            Encrypts the plaintext using an internal private key.
            </summary>
            <param name="plaintext">The text to encrypt.</param>
            <returns>An encrypted string in base64 format.</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.Crypto.Decrypt(System.String)">
            <summary>
            Decrypts the base64key using an internal private key.
            </summary>
            <param name="base64Text">The encrypted string in base64 format.</param>
            <returns>The plaintext string.</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.Crypto.IsMatch(System.String,System.String)">
            <summary>
            Determine if the plain text and encrypted are ultimately the same.
            </summary>
            <param name="encrypted"></param>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.Crypto.ToMD5Hash(System.String)">
            <summary>
            Calculate the md5 hash of the input text.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Cryptography.Crypto.Provider">
            <summary>
            Get reference to current encryption provider.
            </summary>
        </member>
        <member name="T:Starsoft.Core.EmailSupport.IEmailService">
            <summary>
            Email service.
            Simplly sends an email.
            </summary>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.IEmailService.Send(Starsoft.Core.EmailSupport.EmailMessage)">
            <summary>
            Emails the message using default values from Settings.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.IEmailService.Send(Starsoft.Core.EmailSupport.EmailMessage,System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
            Emails the message using the connection strings supplied.
            </summary>
            <param name="message"></param>
            <param name="useCredentials"></param>
            <param name="credentialsUser"></param>
            <param name="credentialsPassword"></param>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.IEmailService.Send(Starsoft.Core.EmailSupport.NotificationMessage)">
            <summary>
            Sends an email using the data from the message.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.IEmailService.Send(Starsoft.Core.EmailSupport.NotificationMessage,System.String,System.String)">
            <summary>
            Sends the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="credentialsUser">The credentials user.</param>
            <param name="credentialsPassword">The credentials password.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.IEmailService.Send(System.Net.Mail.MailMessage,System.Boolean,System.String,System.String)">
            <summary>
            Send the mailmessage.
            </summary>
            <param name="message">The mail message</param>
            <param name="useCredentials">Whether or not to use credentials for security when sending emails.</param>
            <param name="credentialsUser">User name when using credentials.</param>
            <param name="credentialsPassword">Password when using credentials.</param>
            <returns></returns>        
        </member>
        <member name="M:Starsoft.Core.EmailSupport.IEmailService.Send(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Mail the message using the native MailMessage class.
            </summary>
            <param name="from">Who the email is from.</param>
            <param name="to">Who the email is being sent to.</param>
            <param name="subject">Subject of email.</param>
            <param name="body">Email body.</param>
            <param name="useCredentials">Whether or not to use credentials for security when sending emails.</param>
            <param name="credentialsUser">User name when using credentials.</param>
            <param name="credentialsPassword">Password when using credentials.</param>
            <returns></returns>        
        </member>
        <member name="M:Starsoft.Core.EmailSupport.IEmailService.Send(System.Net.Mail.MailMessage)">
            <summary>
            Mail the message using the native MailMessage class and the credentials from the current configuration.
            </summary>
            <param name="mailMessage">The mail message</param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.IEmailService.Settings">
            <summary>
            Configuration information needed for sending emails.
            </summary>
        </member>
        <member name="T:Starsoft.Core.EmailSupport.IEmailSettings">
            <summary>
            Interface for email settings.
            </summary>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.IEmailSettings.SmptServer">
            <summary>
            Gets or sets the SMPT server.
            </summary>
            <value>The SMPT server.</value>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.IEmailSettings.From">
            <summary>
            Gets or sets from.
            </summary>
            <value>From.</value>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.IEmailSettings.UsePort">
            <summary>
            Gets or sets a value indicating whether [use port].
            </summary>
            <value><c>true</c> if [use port]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.IEmailSettings.AuthenticationUserName">
            <summary>
            Gets or sets the name of the authentication user.
            </summary>
            <value>The name of the authentication user.</value>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.IEmailSettings.AuthenticationPassword">
            <summary>
            Gets or sets the authentication password.
            </summary>
            <value>The authentication password.</value>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.IEmailSettings.IsAuthenticationRequired">
            <summary>
            Gets or sets a value indicating whether this instance is authentication required.
            </summary>
            <value>
            	<c>true</c> if this instance is authentication required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.IEmailSettings.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:Starsoft.Core.Collections.EnumeratorMulti`1">
            <summary>
            Extension to enumerator with extended methods to indicate if last or first item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Starsoft.Core.Collections.EnumeratorMulti`1.#ctor(System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{`0}})">
            <summary>
            Initialize the list.
            </summary>
            <param name="allEnumerators"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.EnumeratorMulti`1.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.EnumeratorMulti`1.MoveNext">
            <summary>
            Move to the next item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.EnumeratorMulti`1.Reset">
            <summary>
            Reset the iterator to first item enumerator.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.EnumeratorMulti`1.IsWithinBounds">
            <summary>
            Check if current index referencing the enumerator in the list 
            is within bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.EnumeratorMulti`1.Current">
            <summary>
            Get the current item.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.EnumeratorMulti`1.System#Collections#IEnumerator#Current">
            <summary>
            Get the current item in list.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Encoders.UrlBase64">
            Convert binary data to and from UrlBase64 encoding.  This is identical to
            Base64 encoding, except that the padding character is "." and the other 
            non-alphanumeric characters are "-" and "_" instead of "+" and "/".
            <p>
            The purpose of UrlBase64 encoding is to provide a compact encoding of binary
            data that is safe for use as an URL parameter. Base64 encoding does not
            produce encoded values that are safe for use in URLs, since "/" can be 
            interpreted as a path delimiter; "+" is the encoded form of a space; and
            "=" is used to separate a name from the corresponding value in an URL 
            parameter.
            </p>
        </member>
        <member name="M:Starsoft.Core.Encoders.UrlBase64.Encode(System.Byte[])">
             Encode the input data producing a URL safe base 64 encoded byte array.
            
             @return a byte array containing the URL safe base 64 encoded data.
        </member>
        <member name="M:Starsoft.Core.Encoders.UrlBase64.Encode(System.Byte[],System.IO.Stream)">
             Encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Starsoft.Core.Encoders.UrlBase64.Decode(System.Byte[])">
             Decode the URL safe base 64 encoded input data - white space will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Starsoft.Core.Encoders.UrlBase64.Decode(System.Byte[],System.IO.Stream)">
             decode the URL safe base 64 encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Starsoft.Core.Encoders.UrlBase64.Decode(System.String)">
             decode the URL safe base 64 encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Starsoft.Core.Encoders.UrlBase64.Decode(System.String,System.IO.Stream)">
             Decode the URL safe base 64 encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:Starsoft.Core.Encoders.HexEncoder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Encoders.HexEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             encode the input data producing a Hex output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Starsoft.Core.Encoders.HexEncoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             decode the Hex encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Starsoft.Core.Encoders.HexEncoder.DecodeString(System.String,System.IO.Stream)">
             decode the Hex encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <!-- 对于成员“T:Starsoft.Core.Collections.GenericListBase`1”忽略有格式错误的 XML 注释 -->
        <member name="M:Starsoft.Core.Collections.GenericListBase`1.IndexOf(`0)">
            <summary>
            Index of
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.GenericListBase`1.Insert(System.Int32,`0)">
            <summary>
            Insert.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.GenericListBase`1.RemoveAt(System.Int32)">
            <summary>
            Remove at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.GenericListBase`1.Add(`0[])">
            <summary>
            Add a list of models that should be shown in the dashboard on the sidebar.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.GenericListBase`1.Add(`0)">
            <summary>
            Add
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.GenericListBase`1.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.GenericListBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy to array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.GenericListBase`1.Remove(`0)">
            <summary>
            Removes the item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.GenericListBase`1.Item(System.Int32)">
            <summary>
            Accessor.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.GenericListBase`1.Count">
            <summary>
            Count of items.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.GenericListBase`1.IsReadOnly">
            <summary>
            Determine if is read only
            </summary>
        </member>
        <member name="T:Starsoft.Core.Encoders.ITranslator">
            <summary>
            Translator interface.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Encoders.ITranslator.GetEncodedBlockSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.ITranslator.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
            <param name="length"></param>
            <param name="outBytes"></param>
            <param name="outOff"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.ITranslator.GetDecodedBlockSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.ITranslator.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
            <param name="length"></param>
            <param name="outBytes"></param>
            <param name="outOff"></param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.CatalogSupport.AreaCatalogHelper">
            <summary>
            用54(8+7+7+8+8+8+8)位整数来编码，其中，第一级有8位，可以表达255个子分类，第二级到第三级分类有7位，可以表达127种分类。第四级到第七级分类分别有8位，可以表达255个子分类
            </summary>
        </member>
        <member name="F:Starsoft.Core.CatalogSupport.AreaCatalogHelper.Yard">
            <summary>
            分类特征码
            特征码1计算公式：2^N-2^(N-(N1+N2+…+Ni))
            特征码2计算公式：2^(N-(N1+N2+…+Ni))-1
            </summary>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.AreaCatalogHelper.GetCodeOfFather(System.Int64)">
            <summary>
            返回当前编码的父编码
            </summary>
            <param name="nodeCode">节点编码</param>
            <returns>当前编码的父编码，如果没有父编码则返回0</returns>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.AreaCatalogHelper.GetCodeOfLevelNode(System.Int32,System.Int64)">
            <summary>
            取得第level层次的父级的编码,0表示为一级目录
            </summary>
            <param name="level">要取的第level层次数</param>
            <param name="nodeCode">节点编码</param>
            <returns>取到的第level层次的父级的编码</returns>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.AreaCatalogHelper.GetLevelOfNode(System.Int64)">
            <summary>
            取得编码所在的级别,0表示为一级目录
            </summary>
            <param name="nodeCode">节点编码</param>
            <returns>取得编码所在的级别,0表示为一级目录</returns>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.AreaCatalogHelper.GetMaxCodeOfNode(System.Int64)">
            <summary>
            取得编码级别的最大节点
            </summary>
            <param name="nodeCode">节点编码</param>
            <returns>返回当前节点的最大编码的兄弟节点</returns>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.AreaCatalogHelper.GetNewCodeOfNode(System.Int64,System.Int32)">
            <summary>
            根据父节点返回当前可用的子节点编码
            </summary>
            <param name="fatherCode">父类编码，如果无父类编码，则编码为0</param>
            <param name="index">在当前分类的顺序索引号，从0开始</param>
            <returns>如果大于最大分类级数(7级)则返回-1,如果大于每级分类的最多小类数则返回-2</returns>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.AreaCatalogHelper.GetNewCodeOfNode(System.Int64,System.Int32,System.Int32@)">
            <summary>
            根据父节点返回当前可用的子节点编码
            </summary>
            <param name="fatherCode">父类编码，如果无父类编码，则编码为0</param>
            <param name="index">在当前分类的顺序索引号，从0开始</param>
            <param name="level">返回当前可用子节点的层级，从0开始编码</param>
            <returns>如果大于最大分类级数(7级)则返回-1,如果大于每级分类的最多小类数则返回-2</returns>
        </member>
        <member name="T:Starsoft.Core.PasswordGenerator">
            <summary>
            密码生成
            </summary>
        </member>
        <member name="M:Starsoft.Core.PasswordGenerator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.PasswordGenerator.GetCryptographicRandomNumber(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="lBound"></param>
            <param name="uBound"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.PasswordGenerator.GetRandomCharacter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.PasswordGenerator.Generate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.PasswordGenerator.ConsecutiveCharacters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.PasswordGenerator.ExcludeSymbols">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.PasswordGenerator.Exclusions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.PasswordGenerator.Maximum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.PasswordGenerator.Minimum">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.PasswordGenerator.RepeatCharacters">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starsoft.Core.LamdaLogger">
            <summary>
            Logger using lamda method to call external logging code.
            This decouples code from using a specific ILogging interface via lamdas.
            </summary>
        </member>
        <member name="M:Starsoft.Core.LamdaLogger.#ctor">
            <summary>
            Initialize default loggers to console.
            </summary>
        </member>
        <member name="M:Starsoft.Core.LamdaLogger.Init(Starsoft.Core.ActionCall{System.Object,System.Exception,System.Object[]},Starsoft.Core.ActionCall{System.Object,System.Exception,System.Object[]},Starsoft.Core.ActionCall{System.Object,System.Exception,System.Object[]},Starsoft.Core.ActionCall{System.Object,System.Exception,System.Object[]})">
            <summary>
            Initialize the different level lamda loggers.
            </summary>
            <param name="criticalLogger">Critical logger.</param>
            <param name="errorLogger">Error logger.</param>
            <param name="infoLogger">Information logger.</param>
            <param name="debugLogger">Debug logger.</param>
        </member>
        <member name="M:Starsoft.Core.LamdaLogger.Critical(System.Object,System.Exception,System.Object[])">
            <summary>
            Log a critical error.
            </summary>
            <param name="message">Error message.</param>
            <param name="ex">Relevant exception.</param>
            <param name="args">Logging arguments.</param>
        </member>
        <member name="M:Starsoft.Core.LamdaLogger.Error(System.Object,System.Exception,System.Object[])">
            <summary>
            Log an error.
            </summary>
            <param name="message">Error message.</param>
            <param name="ex">Relevant exception.</param>
            <param name="args">Logging arguments.</param>
        </member>
        <member name="M:Starsoft.Core.LamdaLogger.Info(System.Object,System.Exception,System.Object[])">
            <summary>
            Log info.
            </summary>
            <param name="message">Error message.</param>
            <param name="ex">Relevant exception.</param>
            <param name="args">Logging arguments.</param>
        </member>
        <member name="M:Starsoft.Core.LamdaLogger.Debug(System.Object,System.Exception,System.Object[])">
            <summary>
            Log debug.
            </summary>
            <param name="message">Error message.</param>
            <param name="ex">Relevant exception.</param>
            <param name="args">Logging arguments.</param>
        </member>
        <member name="T:Starsoft.Core.MediaSupport.Watermark">
            <summary>
            The Watermark class contains functionality for applying a text and/or image watermark to an image.
            </summary>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.Watermark.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Starsoft.Core.MediaSupport.Watermark"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.Watermark.ApplyWatermark(System.String)">
            <summary>
            Overlay the text and/or image watermark over the image specified in the <paramref name="filePath"/> parameter and return.
            </summary>
            <param name="filePath">A string representing the full path to the image file  
            (e.g. "C:\mypics\myprettypony.jpg", "myprettypony.jpg").</param>
            <returns>Returns a <see cref="T:System.Drawing.Image"/> instance containing the image with the watermark applied.</returns>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.Watermark.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.Watermark.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Starsoft.Core.MediaSupport.Watermark.ImageLocation">
            <summary>
            Gets or sets the location for the watermark image on the recipient image.
            </summary>
            <value>The image location.</value>
        </member>
        <member name="P:Starsoft.Core.MediaSupport.Watermark.ImageWidthPercent">
            <summary>
            Gets or sets the percent of the overall width of the recipient image that should be covered with the
            watermark image. The size of the image is automatically scaled to achieve the desired width. For example,
            a value of 50 means the watermark image is 50% as wide as the recipient image. Valid values are 0 - 100.
            A value of 0 turns off this feature and causes the image to be rendered its actual size.
            </summary>
            <value>The image width, in percent.</value>
        </member>
        <member name="P:Starsoft.Core.MediaSupport.Watermark.WatermarkText">
            <summary>
            Gets or sets the watermark text to be applied to the recipient image.
            </summary>
            <value>The watermark text.</value>
        </member>
        <member name="P:Starsoft.Core.MediaSupport.Watermark.TextHeightPixels">
            <summary>
            Gets or sets the height, in pixels, of the watermark text. This value is ignored if the property
            TextWidthPercent is non-zero. Valid values are 0 - 10000.
            </summary>
            <value>The text height, in pixels.</value>
        </member>
        <member name="P:Starsoft.Core.MediaSupport.Watermark.TextWidthPercent">
            <summary>
            Gets or sets the percent of the overall width of the recipient image that should be covered with the
            watermark text. The size of the text is automatically scaled up or down to achieve the desired width. For example,
            a value of 50 means the text is 50% as wide as the recipient image. Valid values are 0 - 100. The text is never
            rendered in a font smaller than 6 pixels, so in cases of long text it may stretch wider than the percentage
            specified in this setting. A value of 0 turns off this feature and causes the text size to be determined by the
            TextSizePixels property.
            </summary>
            <value>The text width, in percent.</value>
        </member>
        <member name="P:Starsoft.Core.MediaSupport.Watermark.TextFontName">
            <summary>
            Gets or sets the font family name to use for the watermark text applied to the recipient image.
            If the name does not represent a font installed on the server, a generic sans serif font is used.
            </summary>
            <value>The name of the text font.</value>
        </member>
        <member name="P:Starsoft.Core.MediaSupport.Watermark.TextLocation">
            <summary>
            Gets or sets the location for the watermark text on the recipient image.
            </summary>
            <value>The text location.</value>
        </member>
        <member name="P:Starsoft.Core.MediaSupport.Watermark.TextColor">
            <summary>
            Gets or sets the color of the watermark text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:Starsoft.Core.MediaSupport.Watermark.TextOpacityPercent">
            <summary>
            Gets or sets the opacity of the watermark text. Valid values are 0 - 100, with 0 being completely
            transparent and 100 completely opaque.
            </summary>
            <value>The text opacity, in percent.</value>
        </member>
        <member name="P:Starsoft.Core.MediaSupport.Watermark.ImageOpacityPercent">
            <summary>
            Gets or sets the opacity of the watermark image. Valid values are 0 - 100, with 0 being completely
            transparent and 100 completely opaque.
            </summary>
            <value>The image opacity, in percent.</value>
        </member>
        <member name="P:Starsoft.Core.MediaSupport.Watermark.ImagePath">
            <summary>
            Gets or sets the full path to a watermark image to be applied to the recipient image. The image
            must be in a format that allows it to be instantiated in a System.Drawing.Bitmap object. If a relative
            path is assigned to this property, it is combined with the current application's path and checked to ensure
            it exists. A System.IO.FileNotFoundException is thrown if this property is assigned a non-empty value and
            the value does not represent a file on the hard drive. Setting this property
            also assigns the WatermarkImage property. An exception is thrown if .NET is unable to create a
            System.Drawing.Image object from the file path. Returns String.Empty if user did not specify a value in
            the configuration file.
            </summary>
            <value>The full path to a watermark image to be applied to the recipient image.</value>
        </member>
        <member name="P:Starsoft.Core.MediaSupport.Watermark.WatermarkImage">
            <summary>
            Gets the watermark image to be applied to the recipient image. The image is created when the
            ImagePath property is assigned. Returns null if ImagePath is not specified (that is, the user did
            not enter a value in the watermarkImagePath property in the configuration file).
            </summary>
            <value>The watermark image to be applied to the recipient image.</value>
        </member>
        <member name="P:Starsoft.Core.MediaSupport.Watermark.WatermarkImageWidth">
            <summary>
            Gets the width, in pixels, of the watermark image. Returns int.MinValue if no watermark image is specified.
            </summary>
            <value>The width, in pixels, of the watermark image.</value>
        </member>
        <member name="P:Starsoft.Core.MediaSupport.Watermark.WatermarkImageHeight">
            <summary>
            Gets the height, in pixels, of the watermark image. Returns int.MinValue if no watermark image is specified.
            </summary>
            <value>The height, in pixels, of the watermark image.</value>
        </member>
        <member name="T:Starsoft.Core.Cryptography.DES.DesKeyType">
            <summary>
            Used to determine the length of a DES key.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Cryptography.DES.DesKeyType.SingleLength">
            <summary>
            Single-length DES key (16 hexadecimal characters, 8 bytes).
            </summary>
        </member>
        <member name="F:Starsoft.Core.Cryptography.DES.DesKeyType.DoubleLength">
            <summary>
            Double-length DES key (32 hexadecimal characters, 16 bytes).
            </summary>
        </member>
        <member name="F:Starsoft.Core.Cryptography.DES.DesKeyType.TripleLength">
            <summary>
            Triple-length DES key (48 hexadecimal characters, 24 bytes).
            </summary>
        </member>
        <member name="T:Starsoft.Core.Cryptography.DES.DESKey">
            <summary>
            This class is used to represent a hexadecimal single, double or 
            triple length DES key.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Cryptography.DES.DESKey._keyA">
            <summary>
            First part of key.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Cryptography.DES.DESKey._keyB">
            <summary>
            Second part of key.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Cryptography.DES.DESKey._keyC">
            <summary>
            Third part of key.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Cryptography.DES.DESKey._keyType">
            <summary>
            Key length.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Cryptography.DES.DESKey.#ctor(Starsoft.Core.Cryptography.DES.DesKeyType)">
            <summary>
            Creates a new random DES key.
            </summary>
            <param name="type">The DES key type (single, double or triple length).</param>
        </member>
        <member name="M:Starsoft.Core.Cryptography.DES.DESKey.#ctor(System.String)">
            <summary>
            Creates a new DES key from hexadecimal characters.
            </summary>
            <param name="text">The hexadecimal representation of the DES key.</param>
        </member>
        <member name="M:Starsoft.Core.Cryptography.DES.DESKey.Init(System.String)">
            <summary>
            Initializes with a hexadecimal DES key.
            </summary>
            <param name="text">Hexadecimal representation of the DES key.</param>
        </member>
        <member name="M:Starsoft.Core.Cryptography.DES.DESKey.ToString">
            <summary>
            Returns the current DES key in hexadecimal form.
            </summary>
            <returns>A string representation of the DES key.</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.DES.DESKey.GetRandomHex">
            <summary>
            Creates a random single-length hexadecimal key.
            </summary>
            <returns>A single-length hexadecimal key.</returns>
        </member>
        <member name="P:Starsoft.Core.Cryptography.DES.DESKey.FirstKeyPart">
            <summary>
            Returns the first key part.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Cryptography.DES.DESKey.SecondKeyPart">
            <summary>
            Returns the second key part.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Cryptography.DES.DESKey.ThirdKeyPart">
            <summary>
            Returns the third key part.
            </summary>
        </member>
        <member name="T:Starsoft.Core.BootStrapSupport.BootStrapper">
            <summary>
            BootStrapper for application startup.
            </summary>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootStrapper.#ctor">
            <summary>
            Applies default values.
            </summary>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootStrapper.Configure">
            <summary>
            Useful for derived classes that extend bootstrapper.
            use this method for adding startup and shutdown tasks.
            </summary>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootStrapper.OnStart(System.String,System.Boolean,System.Action{Starsoft.Core.BootStrapSupport.IAppContext})">
            <summary>
            Add a new startup task.
            </summary>
            <param name="name">Name of action.</param>
            <param name="continueOnFailure">Whether or not to proceed to next task on failure.</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootStrapper.OnStart(System.String,System.String,Starsoft.Core.BootStrapSupport.Task.Importance,System.Boolean,System.Action{Starsoft.Core.BootStrapSupport.IAppContext})">
            <summary>
            Add a new startup task.
            </summary>
            <param name="name">Name of action.</param>
            <param name="group">The group.</param>
            <param name="priority">The priority.</param>
            <param name="continueOnFailure">Whether or not to proceed to next task on failure.</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootStrapper.OnStart(System.String,System.String,Starsoft.Core.BootStrapSupport.Task.Importance,System.Boolean,System.Boolean,System.Action{Starsoft.Core.BootStrapSupport.IAppContext})">
            <summary>
            Add a new startup task.
            </summary>
            <param name="name">Name of action.</param>
            <param name="group">The group.</param>
            <param name="priority">The priority.</param>
            <param name="isEnabled">Whether or not the task is enabled.</param>
            <param name="continueOnFailure">Whether or not to proceed to next task on failure.</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootStrapper.OnStart(Starsoft.Core.BootStrapSupport.Task)">
            <summary>
            Add a new startup task.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootStrapper.OnStop(System.String,System.String,Starsoft.Core.BootStrapSupport.Task.Importance,System.Boolean,System.Action{Starsoft.Core.BootStrapSupport.IAppContext})">
            <summary>
            Add a shutdown task.
            </summary>
            <param name="name">Name of the action.</param>
            <param name="group">The group.</param>
            <param name="priority">The priority.</param>
            <param name="continueOnFailure">Whether or not to proceed next shutdown task on failure.</param>
            <param name="action">Action to execute on shutdown</param>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootStrapper.OnStop(Starsoft.Core.BootStrapSupport.Task)">
            <summary>
            Add a shutdown task.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootStrapper.StartUp(Starsoft.Core.BootStrapSupport.IAppContext)">
            <summary>
            Run startup.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootStrapper.StartUp(Starsoft.Core.BootStrapSupport.IAppContext,System.String[])">
            <summary>
            Run startup.
            </summary>
            <param name="context">The context.</param>
            <param name="taskNames">The task names to startup.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootStrapper.ShutDown(Starsoft.Core.BootStrapSupport.IAppContext)">
            <summary>
            Run Shutdown.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootStrapper.ShutDown(Starsoft.Core.BootStrapSupport.IAppContext,System.String[])">
            <summary>
            Run Shutdown.
            </summary>
            <param name="context">The context.</param>
            <param name="taskNames">The task names.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootStrapper.GetStartupStatus">
            <summary>
            Gets the startup status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.BootStrapper.InternalRun(System.Collections.Generic.IList{Starsoft.Core.BootStrapSupport.Task},Starsoft.Core.BootStrapSupport.IAppContext,System.Boolean,System.String[])">
            <summary>
            Run the tasks supplied.
            </summary>
            <param name="tasks"></param>
            <param name="context"></param>
            <param name="isStartup"></param>
            <param name="taskNames"></param>
        </member>
        <member name="P:Starsoft.Core.BootStrapSupport.BootStrapper.LogErrors">
            <summary>
            Whether or not to log all errors to the default logger.
            </summary>
        </member>
        <member name="P:Starsoft.Core.BootStrapSupport.BootStrapper.Logger">
            <summary>
            A lamda to call on errors.
            </summary>
        </member>
        <member name="P:Starsoft.Core.BootStrapSupport.BootStrapper.PropagateException">
            <summary>
            If an exception occurrs in one of the tasks and that should prevent continuing,
            this indicates whether or catch the exception or propagate it up.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Try">
            <summary>
            Wrapper class to simplify lines of code around Try/Catch blocks with various customized behaviour.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Try.CatchLog(Starsoft.Core.ActionCall)">
            <summary>
            Calls the action and logs any exception that occurrs
            </summary>
            <param name="action">Action to execute inside a try/catch.</param>
        </member>
        <member name="M:Starsoft.Core.Try.CatchLog(System.String,Starsoft.Core.ActionCall)">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="errorMessage">Error message to log.</param>
            <param name="action">The function to call.</param>
        </member>
        <member name="M:Starsoft.Core.Try.CatchLogRethrow(Starsoft.Core.ActionCall)">
            <summary>
            Calls the action and logs any exception that occurrs and rethrows the exception.
            <param name="action">Action to execute in a try/catch.</param>
            </summary>
        </member>
        <member name="M:Starsoft.Core.Try.CatchLog(System.String,Starsoft.Core.ActionCall,Starsoft.Core.ActionCall{System.Object,System.Exception,System.Object[]})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="errorMessage">Error message to log.</param>
            <param name="action">The function to call.</param>
            <param name="logger">The logger to use</param>
        </member>
        <member name="M:Starsoft.Core.Try.Catch(Starsoft.Core.ActionCall,System.Action{System.Exception})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="action">The function to call.</param>
            <param name="exceptionHandler">The action to use for handling the exception</param>
        </member>
        <member name="M:Starsoft.Core.Try.CatchHandle(System.String,Starsoft.Core.ActionCall,System.Action{System.Exception},Starsoft.Core.ActionCall)">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="errorMessage">Error message to log.</param>
            <param name="action">The function to call.</param>
            <param name="exceptionHandler">The action to use for handling the exception</param>
            <param name="finallyHandler">The action to use in the finally block</param>
        </member>
        <member name="M:Starsoft.Core.Try.CatchLogGet``1(System.String,Starsoft.Core.FuncCall{``0})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="errorMessage">Error message to log.</param>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:Starsoft.Core.Try.CatchLogGet``1(System.String,System.Boolean,Starsoft.Core.FuncCall{``0},Starsoft.Core.ActionCall{System.Object,System.Exception,System.Object[]})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <typeparam name="T">Type of return item.</typeparam>
            <param name="errorMessage">Error message to log.</param>
            <param name="rethrow">Whether or not to rethrow</param>
            <param name="action">The function to call.</param>
            <param name="logger">The logger to use</param>
            <returns>Returned result.</returns>
        </member>
        <member name="M:Starsoft.Core.Try.CatchLogGetBoolResult``1(System.String,Starsoft.Core.FuncCall{``0})">
            <summary>
            Get a boolmessage item after running the action.
            </summary>
            <param name="errorMessage">Error message to log.</param>
            <param name="action">The function to call.</param>
            <returns>Returned result.</returns>
        </member>
        <member name="M:Starsoft.Core.Try.CatchLogGetBoolResult``1(System.String,Starsoft.Core.FuncCall{``0},Starsoft.Core.ActionCall{System.Object,System.Exception,System.Object[]})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <typeparam name="T">Type of return item.</typeparam>
            <param name="errorMessage">Error message to log.</param>
            <param name="action">The function to call.</param>
            <param name="logger">Logger object.</param>
            <returns>Return item.</returns>
        </member>
        <member name="M:Starsoft.Core.Try.TryCatchLogGetBoolMessageItem(System.String,Starsoft.Core.FuncCall{Starsoft.Core.BoolMessageItem},Starsoft.Core.ActionCall{System.Object,System.Exception,System.Object[]})">
            <summary>
            Executes an action inside a try catch and logs any exceptions.
            </summary>
            <param name="errorMessage">Error message to log.</param>
            <param name="action">The function to call.</param>
            <param name="logger">Logger object.</param>
            <returns>Return item.</returns>
        </member>
        <member name="M:Starsoft.Core.Try.HandleException(System.Exception)">
            <summary>
            Handle the highest level application exception.
            </summary>
            <param name="ex">Exception to handle.</param>
        </member>
        <member name="M:Starsoft.Core.Try.CatchLogGetBoolResultEx(System.String,System.String,Starsoft.Core.ActionCall)">
            <summary>
            Runs the action, logs an error and returns boolMessageEx that wraps up all there values.
            Bool flag for successful call without excpetion, errorMessage if there was an exception, 
            and the exception itself if it occurred.
            </summary>
            <param name="message">Success message</param>
            <param name="errorMessage">Failure message</param>
            <param name="action">Action to run</param>
            <returns>Error message.</returns>
        </member>
        <member name="M:Starsoft.Core.Try.CatchLogReturnBoolResultEx(System.String,System.String,Starsoft.Core.FuncCall{Starsoft.Core.BoolMessageEx})">
            <summary>
            Runs the action, logs an error and returns boolMessageEx that wraps up all there values.
            Bool flag for successful call without excpetion, errorMessage if there was an exception, 
            and the exception itself if it occurred.
            </summary>
            <param name="message">Success message</param>
            <param name="errorMessage">Failure message</param>
            <param name="action">Action to run</param>
            <returns>Error message.</returns>
        </member>
        <member name="M:Starsoft.Core.Try.GetBoolResultEx(System.String,System.String,Starsoft.Core.FuncCall{Starsoft.Core.BoolMessageEx})">
            <summary>
            Runs the action, logs an error and returns boolMessageEx that wraps up all there values.
            Bool flag for successful call without excpetion, errorMessage if there was an exception, 
            and the exception itself if it occurred.
            </summary>
            <param name="message">Success message</param>
            <param name="errorMessage">Failure message</param>
            <param name="action">Action to run</param>
            <returns>Error message.</returns>
        </member>
        <member name="P:Starsoft.Core.Try.Logger">
            <summary>
            Initialize logging lamda.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Reflection.ReflectionUtils">
            <summary>
            Various reflection based utility methods.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.SetProperties``1(``0,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Set object properties on T using the properties collection supplied.
            The properties collection is the collection of "property" to value.
            </summary>
            <typeparam name="T">A class type.</typeparam>
            <param name="obj">Object whose properties will be set.</param>
            <param name="properties">List of key/value pairs with property names and values.</param>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.SetProperty``1(System.Object,System.String,System.Object)">
            <summary>
            Set the object properties using the prop name and value.
            </summary>
            <typeparam name="T">A class type.</typeparam>
            <param name="obj">Object whose property will be set.</param>
            <param name="propName">Property name to set.</param>
            <param name="propVal">Property value to set.</param>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Set the object properties using the prop name and value.
            </summary>
            <param name="obj">Object whose property will be set.</param>
            <param name="propName">Property name to set.</param>
            <param name="propVal">Property value to set.</param>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.SetProperty(System.Object,System.Reflection.PropertyInfo,System.Object,System.Boolean)">
            <summary>
            Set the object properties using the prop name and value.
            </summary>
            <param name="obj">Object whose property will be set.</param>
            <param name="prop">Property information.</param>
            <param name="propVal">Property value to set.</param>
            <param name="catchException">Try to catch any exception and
            not throw it to the caller.</param>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.SetProperty(System.Object,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Set the property value using the string value.
            </summary>
            <param name="obj">Object whose property will be set.</param>
            <param name="prop">Property information.</param>
            <param name="propVal">Property value to set.</param>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.GetPropertyValue(System.Object,System.String)">
            <summary>
            Get the property value.
            </summary>
            <param name="obj">Object whose property will be retrieved.</param>
            <param name="propName">Name of property to retrieve.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.GetPropertyValues(System.Object,System.Collections.Generic.IList{System.String})">
            <summary>
            Get all the property values.
            </summary>
            <param name="obj">Object whose properties will be retrieved.</param>
            <param name="properties">List of properties to retrieve.</param>
            <returns>List with property values.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.GetProperties(System.Object,System.String)">
            <summary>
            Get all the properties.
            </summary>
            <param name="obj">Object whose properties will be retrieved.</param>
            <param name="propsDelimited">Delimited list with properties to retrieve.</param>
            <returns>List of property values.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.GetProperties(System.Type,System.String[])">
            <summary>
            Get property information for a type.
            </summary>
            <param name="type">Type whose property names to retrieve.</param>
            <param name="props">Array with property names to look for.</param>
            <returns>List with property information of found properties.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.GetProperties(System.Type,System.String[],System.Reflection.BindingFlags)">
            <summary>
            Get all the properties.
            </summary>
            <param name="type">Type whose property names to retrieve.</param>
            <param name="props">Array with property names to look for.</param>
            <param name="flags">Flags to use when searching for properties.</param>
            <returns>List with property information of found properties.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.GetPropertyValueSafely(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Gets the property value safely, without throwing an exception.
            If an exception is caught, null is returned.
            </summary>
            <param name="obj">Object to look into.</param>
            <param name="propInfo">Information of property to retrieve.</param>
            <returns>Retrieved property value.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.GetAllProperties(System.Object,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Gets all the properties of an object.
            </summary>
            <param name="obj">Object to look into.</param>
            <param name="criteria">Matching criteria.</param>
            <returns>List with information of matched properties.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.GetProperties(System.Type,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Get the properties of a type.
            </summary>
            <param name="type">Type to look into.</param>
            <param name="criteria">Matching criteria.</param>
            <returns>List of information of matched properties.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.GetWritableProperties(System.Object,System.Collections.Specialized.StringDictionary)">
            <summary>
            Gets all the writable properties of an object.
            </summary>
            <param name="obj">Object to look into.</param>
            <param name="propsToExclude">Dictionary with properties to exclude.</param>
            <returns>List with information of matched properties.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.GetProperties(System.Collections.Specialized.StringDictionary,System.Type)">
            <summary>
            Gets all the properties of a type.
            </summary>
            <param name="propsToExclude">Dictionary with properties to exclude.</param>
            <param name="typ">Type to look into.</param>
            <returns>List with information of matched properties.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.GetPropertiesAsMap(System.Object,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Gets all the properties of the object as dictionary of property names to propertyInfo.
            </summary>
            <param name="obj">Object to look into.</param>
            <param name="criteria">Matching criteria.</param>
            <returns>Dictionary with property name and information of matched properties.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.GetPropertiesAsMap(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Get all the properties.
            </summary>
            <param name="type">Type to look into.</param>
            <param name="flags">Flags to use when looking for properties.</param>
            <param name="isCaseSensitive">True to use the property name in the
            dictionary with its lower-cased value.</param>
            <returns>Dictionary with property name and information of found properties.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.GetPropertiesAsMap``1(System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Get all the properties.
            </summary>
            <typeparam name="T">Type to look into.</typeparam>
            <param name="flags">Flags to use when looking for properties.</param>
            <param name="isCaseSensitive">True to use the property name in the
            dictionary with its lower-cased value.</param>
            <returns>Dictionary with property name and information of found properties.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.GetProperty(System.Type,System.String)">
            <summary>
            Get the propertyInfo of the specified property name.
            </summary>
            <param name="type">Type to look into.</param>
            <param name="propertyName">Name of property.</param>
            <returns>Information of property.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.GetWritableProperties(System.Type,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Gets a list of all the writable properties of the class associated with the object.
            </summary>
            <param name="type">Type to look into.</param>
            <param name="criteria">Matching criteria.</param>
            <remarks>This method does not take into account, security, generics, etc.
            It only checks whether or not the property can be written to.</remarks>
            <returns>List with information of matching properties.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes the method on the object provided.
            </summary>
            <param name="obj">The object containing the method to invoke</param>
            <param name="methodName">arguments to the method.</param>
            <param name="parameters">Parameters to pass when invoking the method.</param>
        </member>
        <member name="M:Starsoft.Core.Reflection.ReflectionUtils.CopyPropertyValue(System.Object,System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Copies the property value from the source to destination.
            </summary>
            <param name="source">Source object.</param>
            <param name="destination">Destination object.</param>
            <param name="prop">Information of property whose value
            is to be copied from the source to the target object.</param>
        </member>
        <member name="T:Starsoft.Core.Collections.DictionarySet`1">
            <summary>
            2 Level Tree like dictionary.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Starsoft.Core.Collections.ISet`1">
            <summary>
            Interface for a set of type T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Starsoft.Core.Collections.ISet`1.Union(Starsoft.Core.Collections.ISet{`0})">
            <summary>
            Unions the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.ISet`1.Intersect(Starsoft.Core.Collections.ISet{`0})">
            <summary>
            Returns set with elements common to both.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.ISet`1.ExclusiveOr(Starsoft.Core.Collections.ISet{`0})">
            <summary>
            Either or.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.ISet`1.Minus(Starsoft.Core.Collections.ISet{`0})">
            <summary>
            Gets the items in the set not contained in the set supplied.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.#ctor">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.ContainsKey(`0)">
            <summary>
            Determine if the underlying collection contains the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.Add(`0,`0)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.Remove(`0)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.TryGetValue(`0,`0@)">
            <summary>
            Try to get the value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.Add(System.Collections.Generic.KeyValuePair{`0,`0})">
            <summary>
            Not-supported.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.Clear">
            <summary>
            Not-Supported.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.Contains(System.Collections.Generic.KeyValuePair{`0,`0})">
            <summary>
            Determine whether key value pair is in dictionary.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.CopyTo(System.Collections.Generic.KeyValuePair{`0,`0}[],System.Int32)">
            <summary>
            Copy items to the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.Remove(System.Collections.Generic.KeyValuePair{`0,`0})">
            <summary>
            Non-supported action.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.Union(Starsoft.Core.Collections.ISet{`0})">
            <summary>
            Unions the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.Intersect(Starsoft.Core.Collections.ISet{`0})">
            <summary>
            Intersects the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.ExclusiveOr(Starsoft.Core.Collections.ISet{`0})">
            <summary>
            Exclusives the or.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.Minus(Starsoft.Core.Collections.ISet{`0})">
            <summary>
            Minuses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionarySet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionarySet`1.Count">
            <summary>
            Number of items in the dictionary.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionarySet`1.Item(`0)">
            <summary>
            Returns the value associated with the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionarySet`1.Keys">
            <summary>
            Return keys.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionarySet`1.Values">
            <summary>
            Get the values.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionarySet`1.IsReadOnly">
            <summary>
            Indicate read-only
            </summary>
        </member>
        <member name="T:Starsoft.Core.Parsing.LexBase">
            <summary>
            Base class for lexical parsing.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexBase._reader">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexBase._settings">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexBase._tokenList">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexBase._errors">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexBase._whiteSpaceMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexBase.Init(Starsoft.Core.Parsing.LexSettings)">
            <summary>
            Initalize using default settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexBase.ParseText(System.String)">
            <summary>
            Parse text
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexBase.ReadNonQuotedToken(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Read a continuous set of characters until 
            end of text or separater is reached.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexBase.ReadQuotedToken">
            <summary>
            Read a quoted set of characters.
            e.g. 'firstname' or "lastname"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexBase.Expect(System.String)">
            <summary>
            Expect the current char to be the char specified.
            </summary>
            <param name="expectChar"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexBase.AddError(System.String)">
            <summary>
            Add error to list of errors.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexBase.CheckAndThrowErrors">
            <summary>
            Check for errors and throw.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexBase.ExcludeNewLinesStored">
            <summary>
            Exclude new lines stored at the end as a result of the parser
            reading the \r\n at the end of line.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexBase.Reset(System.String)">
            <summary>
            Reset the state.
            </summary>
            <param name="line"></param>
        </member>
        <member name="P:Starsoft.Core.Parsing.LexBase.AllowNewLine">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starsoft.Core.HtmlUtils">
            <summary>
            Html字符实用工具类
            </summary>
        </member>
        <member name="M:Starsoft.Core.HtmlUtils.MaxLength(System.String,System.Int32)">
            <summary>
            字符串截取
            </summary>
            <param name="text">string</param>
            <param name="charLimit">最大字符数</param>
            <returns>string</returns>
        </member>
        <member name="M:Starsoft.Core.HtmlUtils.RemoveHtml(System.String)">
            <summary>
            清除html标记并将多个连在一起的空字符替换为一个空字符,返回处理后的字符串
            </summary>
            <param name="html">html</param>
            <returns>string</returns>
        </member>
        <member name="M:Starsoft.Core.HtmlUtils.RemoveHtml(System.String,System.Int32)">
            <summary>
            清除html标记并将多个连在一起的空字符替换为一个空字符,返回指定长度的处理后的字符串
            </summary>
            <param name="html">html</param>
            <param name="charLimit">最大字符数</param>
            <returns>string</returns>
        </member>
        <member name="M:Starsoft.Core.HtmlUtils.StripAllTags(System.String)">
            <summary>
            替换所有Html 标记
            </summary>
            <param name="stringToStrip"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.HtmlUtils.StripAllTags(System.String,System.Boolean)">
            <summary>
            替换所有Html标记
            </summary>
            <param name="stringToStrip"></param>
            <param name="enableMultiLine"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.HtmlUtils.Trim(System.String,System.Int32)">
            <summary>
            替换所有Html标记，并按字节长度截取指定长度的字符串
            </summary>
            <param name="html"></param>
            <param name="charLimit"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.HtmlUtils.GetTextFromHTML(System.String)">
            <summary>
            从HTML中获取文本,保留br,p,img
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.HtmlUtils.RemoveUnsafeHtml(System.String)">
            <summary>
            过滤HTML中的不安全标签
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.HtmlUtils.HtmlDecodeEntities(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.HtmlUtils.HtmlEncodeEntities(System.String)">
            <summary>
            
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Configuration.ConfigSource">
            <summary> 
            Simple class to lookup stored configuration settings by key. 
            Also provides type conversion methods. 
            GetInt("PageSize"); 
            GetBool("IsEnabled"); 
            </summary> 
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSource.#ctor">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSource.Init">
            <summary>
            Initialize.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSource.Load">
            <summary>
            Load from datasource.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSource.Save">
            <summary>
            Save to the datasource.
            </summary>
        </member>
        <member name="E:Starsoft.Core.Configuration.ConfigSource.OnConfigSourceChanged">
            <summary>
            Event handler for when the underlying config source changed.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Configuration.ConfigSource.SourcePath">
            <summary>
            The source file path.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.Configs.LoadFiles(System.String)">
            <summary>
            Load config from single file or multiple files.
            </summary>
            <param name="configs">"prod.config" or multiple paths delimited by command.
            e.g. "prod.config, qa.config, dev.config"</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.Configs.LoadFiles(System.String,System.String)">
            <summary>
            Load config from single file or multiple files.
            </summary>
            <param name="configDirectory"></param>
            <param name="configs">"prod.config" or multiple paths delimited by command.
            e.g. "prod.config, qa.config, dev.config"</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.Configs.LoadDb(System.String)">
            <summary>
            Load from the database
            </summary>
            <param name="configNames">Comma delimited names of the configs to load
            from the database.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.Configs.LoadObject(System.Object)">
            <summary>
            Load config settings into a configSource from an object using
            it's public properties.
            </summary>
            <param name="configObj"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.Configs.LoadString(System.String)">
            <summary>
            Load from string.
            </summary>
            <param name="configText"></param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Collections.SetHelper`1">
            <summary>
            Helper class for sets.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.SetHelper`1.Union(Starsoft.Core.Collections.ISet{`0},Starsoft.Core.Collections.ISet{`0})">
            <summary>
            Gets all the unique elements from both sets.
            Whats in first OR second.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.SetHelper`1.Intersect(Starsoft.Core.Collections.ISet{`0},Starsoft.Core.Collections.ISet{`0})">
            <summary>
            Finds the intersection of the elements in first and second.
            Whats in both first AND second.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.SetHelper`1.ExclusiveOr(Starsoft.Core.Collections.ISet{`0},Starsoft.Core.Collections.ISet{`0})">
            <summary>
            Exclusives the or.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.SetHelper`1.Minus(Starsoft.Core.Collections.ISet{`0},Starsoft.Core.Collections.ISet{`0})">
            <summary>
            Minuses the specified other.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Collections.DictionaryReadOnly`2">
            <summary>
            Read only wrapper for generics based dictionary.
            Only provides lookup retrieval abilities.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryReadOnly`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryReadOnly`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Boolean)">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
            <param name="items"></param>
            <param name="throwOnWritableAction"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryReadOnly`2.ContainsKey(`0)">
            <summary>
            Determine if the underlying collection contains the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryReadOnly`2.Add(`0,`1)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryReadOnly`2.Remove(`0)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryReadOnly`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get the value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryReadOnly`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Not-supported.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryReadOnly`2.Clear">
            <summary>
            Not-Supported.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryReadOnly`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determine whether key value pair is in dictionary.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryReadOnly`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copy items to the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryReadOnly`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Non-supported action.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryReadOnly`2.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryReadOnly`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryReadOnly`2.CheckAndThrow(System.String)">
            <summary>
            Check and thrown based on flag.
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryReadOnly`2.Count">
            <summary>
            Number of items in the dictionary.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryReadOnly`2.Item(`0)">
            <summary>
            Returns the value associated with the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryReadOnly`2.Keys">
            <summary>
            Return keys.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryReadOnly`2.Values">
            <summary>
            Get the values.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryReadOnly`2.IsReadOnly">
            <summary>
            Indicate read-only
            </summary>
        </member>
        <member name="T:Starsoft.Core.Parsing.LexList">
            <summary>
            Lexical parser used to parsing text.
            e.g. Such as parsing arguments to a program.
            </summary>
            <example>
                IList&lt;string&gt; other = LexListParser.Parse("'firstname', 25.8, 3/20/2009, true, "lastname" ");
            </example>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexList._lines">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexList._separatorMap">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexList._defaultSettings">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexList.Parse(System.String)">
            <summary>
            Parse supplied text using default settings.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexList.ParseList(System.String)">
            <summary>
            Parse supplied text using default settings.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexList.ParseTable(System.String)">
            <summary>
            Parse supplied text using default settings.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexList.Parse(System.String,Starsoft.Core.Parsing.LexListSettings)">
            <summary>
            Parse supplied text using supplied settings.
            </summary>
            <param name="text"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexList.#ctor">
            <summary>
            Create using default settings.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexList.#ctor(Starsoft.Core.Parsing.LexListSettings)">
            <summary>
            Create with supplied settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexList.Init(Starsoft.Core.Parsing.LexSettings)">
            <summary>
            
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexList.ParseLines(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexList.Reset(System.String)">
            <summary>
            
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexList.ParseQuotedItem(Starsoft.Core.Parsing.LexListSettings)">
            <summary>
            Parse a quoted item. e.g. "batman"
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexList.CheckAndConsumeWhiteSpace">
            <summary>
            Check and consume whitespace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexList.CheckAndHandleNewLine(Starsoft.Core.Parsing.LexListSettings)">
            <summary>
            Check for and handle new line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexList.HasMore">
            <summary>
            Has more text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexList.ParseNonQuotedItem(Starsoft.Core.Parsing.LexListSettings)">
            <summary>
            Parse a non-quoted item e.g. 123 as opposed to "123"
            </summary>
        </member>
        <member name="T:Starsoft.Core.Parsing.LexListSettings">
            <summary>
            Parse settings for the Lexical List parser.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexListSettings.Delimeter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexListSettings.TrimWhiteSpace">
            <summary>
            Indicates whether or not to trim the white space if the
            separator is not a whitespace char. e.g. if "," trim white space.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexListSettings.MultipleRecordsUsingNewLine">
            <summary>
            Flag indicating whether or not to handle multiple lines as a single record.
            Otherwise, new lines indicate end of record.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexListSettings.AllowNewLineInFirstLine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexListSettings.AllowNewLinesAsTextOnlyAfterFirstLine">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starsoft.Core.PagedList`1">
            <summary>
            Paged list to represent the page index, size, total records, and total pages
            in addition to the items.
            </summary>
            <typeparam name="T">Type of items to hold in the paged list.</typeparam>
        </member>
        <member name="F:Starsoft.Core.PagedList`1.Empty">
            <summary>
            Empty/ null object.
            </summary>
        </member>
        <member name="M:Starsoft.Core.PagedList`1.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{`0})">
            <summary>
            Initialize w/ items, page index, size and total records.
            </summary>
            <param name="items">The items representing the list.</param>
            <param name="pageIndex">Page index to start at.</param>
            <param name="pageSize">Page size to start with.</param>
            <param name="totalRecords">Total number of records to start with.</param>
        </member>
        <member name="P:Starsoft.Core.PagedList`1.PageSize">
            <summary>
            Get/set the size of a page.
            </summary>
        </member>
        <member name="P:Starsoft.Core.PagedList`1.PageIndex">
            <summary>
            Get/set the page index.
            </summary>
        </member>
        <member name="P:Starsoft.Core.PagedList`1.TotalCount">
            <summary>
            Get/set the total number of items in the list.
            </summary>
        </member>
        <member name="P:Starsoft.Core.PagedList`1.TotalPages">
            <summary>
            Get/set the total number of pages.
            </summary>
        </member>
        <member name="T:Starsoft.Core.MediaSupport.MediaHelper">
            <summary>
            Helper class for checking media formats ( audio, video, image ).
            </summary>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.MediaHelper.#cctor">
            <summary>
            Initialize the formats for audio, video, image.
            </summary>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.MediaHelper.IsAudioFormat(System.String)">
            <summary>
            Whether or not the format supplied is an audio format.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.MediaHelper.IsVideoFormat(System.String)">
            <summary>
            Whether or not the format supplied is an audio format.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.MediaHelper.IsImageFormat(System.String)">
            <summary>
            Whether or not the format supplied is an audio format.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Encoders.Hex">
            <summary>
            Class to decode and encode Hex.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Encoders.Hex.Encode(System.Byte[])">
             encode the input data producing a Hex encoded byte array.
            
             @return a byte array containing the Hex encoded data.
        </member>
        <member name="M:Starsoft.Core.Encoders.Hex.Encode(System.Byte[],System.Int32,System.Int32)">
             encode the input data producing a Hex encoded byte array.
            
             @return a byte array containing the Hex encoded data.
        </member>
        <member name="M:Starsoft.Core.Encoders.Hex.Encode(System.Byte[],System.IO.Stream)">
             Hex encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Starsoft.Core.Encoders.Hex.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             Hex encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Starsoft.Core.Encoders.Hex.Decode(System.Byte[])">
             decode the Hex encoded input data. It is assumed the input data is valid.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Starsoft.Core.Encoders.Hex.Decode(System.String)">
             decode the Hex encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Starsoft.Core.Encoders.Hex.Decode(System.String,System.IO.Stream)">
             decode the Hex encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:Starsoft.Core.ChineseConvertor">
            <summary>
            汉字拼音声母类
            </summary>
        </member>
        <member name="M:Starsoft.Core.ChineseConvertor.GetPYString(System.String)">
            <summary>
            汉字转拼音缩写
            </summary>
            <param name="str">要转换的汉字字符串</param>
            <returns>拼音缩写</returns>
        </member>
        <member name="M:Starsoft.Core.ChineseConvertor.GetPYChar(System.String)">
            <summary>
            取单个字符的拼音声母
            </summary>
            <param name="c">要转换的单个汉字</param>
            <returns>拼音声母</returns>
        </member>
        <member name="T:Starsoft.Core.Logging.LogEvent">
            <summary>
            A record in the log.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogEvent.Level">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogEvent.Message">
            <summary>
            Message that is logged.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogEvent.FinalMessage">
            <summary>
            This is the final message that is printed.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogEvent.Error">
            <summary>
            Exception passed.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogEvent.Args">
            <summary>
            Additional arguments passed by caller.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogEvent.Computer">
            <summary>
            Name of the computer.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogEvent.CreateTime">
            <summary>
            Create time.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogEvent.ThreadName">
            <summary>
            The name of the currently executing thread that created this log entry.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogEvent.UserName">
            <summary>
            Name of the user.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogEvent.Ex">
            <summary>
            The exception.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogEvent.LogType">
            <summary>
            The data type of the caller that is logging the event.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogEvent.#ctor">
            <summary>
            Enable default constructor.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Logging.LogLevel">
            <summary>
            Level for the logging.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogLevel.Message">
            <summary>
            Used to always log a message regardless of loglevel
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogLevel.Debug">
            <summary>
            Debug level
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogLevel.Info">
            <summary>
            Info level
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogLevel.Warn">
            <summary>
            Warn level
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogLevel.Error">
            <summary>
            Error level
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogLevel.Fatal">
            <summary>
            Fatal level
            </summary>
        </member>
        <member name="T:Starsoft.Core.Logging.LogSettings">
            <summary>
            Settings for a logger.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogSettings.Level">
            <summary>
            Current log level.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Logging.LogSettings.AppName">
            <summary>
            Application associated w/ logger.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Parsing.TokenReaderSettings">
            <summary>
            Settings for the token reader class.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.TokenReaderSettings.EscapeChar">
            <summary>
            Char used to escape.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.TokenReaderSettings.Tokens">
            <summary>
            Tokens
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.TokenReaderSettings.WhiteSpaceTokens">
            <summary>
            White space tokens.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Parsing.TokenReaderSettings.EolTokens">
            <summary>
            End of line chars.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Parsing.ITokenReader">
            <summary>
            Interface for a Token reader.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.RegisterEol(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="eolchars"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.RegisterWhiteSpace(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="whitespaceChars"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.Init(System.String,System.String,System.String[],System.String[],System.String[])">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="escapeChar"></param>
            <param name="tokens"></param>
            <param name="whiteSpaceTokens"></param>
            <param name="eolTokens"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.Init(System.String,Starsoft.Core.Parsing.TokenReaderSettings)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.PeekChar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.PeekChars(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.PeekLine">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.ConsumeChar">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.ConsumeChars(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.ConsumeWhiteSpace">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.ConsumeWhiteSpace(System.Boolean)">
            <summary>
            
            </summary>
            <param name="readFirst"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.ConsumeWhiteSpace(System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="tabCount"></param>
            <param name="whiteSpace"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.ConsumeNewLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.ConsumeNewLines">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.ReadBackChar">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.ReadBackChar(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.ReadChar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.ReadChars(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.ReadToEol">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.ReadToken(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="endChar"></param>
            <param name="escapeChar"></param>
            <param name="includeEndChar"></param>
            <param name="advanceFirst"></param>
            <param name="expectEndChar"></param>
            <param name="readPastEndChar"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.CurrentCharIndex">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.CurrentCharInt">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.IsEscape">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.IsToken">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.IsEnd">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.IsAtEnd">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.IsEol">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.IsEol(System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="eolChars"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.IsWhiteSpace(System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="whitespaceChars"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.ITokenReader.IsWhiteSpace">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Parsing.ITokenReader.CurrentChar">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.Parsing.ITokenReader.PreviousChar">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.Parsing.ITokenReader.PreviousCharAny">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.Parsing.ITokenReader.EolChars">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starsoft.Core.Parsing.TokenReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.#ctor">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.#ctor(System.String,System.String,System.String[],System.String[],System.String[])">
            <summary>
            Initialize
            </summary>
            <param name="text"></param>
            <param name="escapeChar"></param>
            <param name="tokens"></param>
            <param name="whiteSpaceTokens"></param>
            <param name="eolChars"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.Init(System.String,Starsoft.Core.Parsing.TokenReaderSettings)">
            <summary>
            Initialize using settings.
            </summary>
            <param name="text"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.Init(System.String,System.String,System.String[],System.String[],System.String[])">
            <summary>
            Initialize default instance.
            </summary>
            <param name="text"></param>
            <param name="escapeChar"></param>
            <param name="tokens"></param>
            <param name="whiteSpaceTokens"></param>
            <param name="eolTokens"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.RegisterEol(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Store the end of line chars.
            </summary>
            <param name="eolchars"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.RegisterWhiteSpace(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Store the white space chars.
            </summary>
            <param name="whitespaceChars"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.Reset">
            <summary>
            Reset reader for parsing again.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.PeekChar">
            <summary>
            Returns the char at current position + 1.
            </summary>
            <returns>Next char or string.empty if end of text.</returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.PeekChars(System.Int32)">
            <summary>
            Returns the chars starting at current position + 1 and
            including the <paramref name="count"/> number of characters.
            </summary>
            <param name="count"></param>
            <returns>Range of chars as string or string.empty if end of text.</returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.PeekLine">
            <summary>
            Peeks at the string all the way until the end of line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.ConsumeChar">
            <summary>
            Advance and consume the current current char without storing 
            the char in the additional buffer for undo.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.ConsumeChars(System.Int32)">
            <summary>
            Consume the next <paramref name="count"/> chars without
            storing them in the additional buffer for undo.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.ConsumeWhiteSpace">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.ConsumeWhiteSpace(System.Boolean)">
            <summary>
            Consume all white space.
            This works by checking the next char against
            the chars in the dictionary of chars supplied during initialization.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.ConsumeWhiteSpace(System.Int32@,System.Int32@)">
            <summary>
            Consume white space and return number of times the tab char was consumed,
            and the number of 
            </summary>
            <param name="tabCount"></param>
            <param name="whiteSpace"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.ConsumeNewLine">
            <summary>
            Consume new line.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.ConsumeNewLines">
            <summary>
            Consume New Lines.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.ReadBackChar">
            <summary>
            Read back the last char and reset
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.ReadBackChar(System.Int32)">
            <summary>
            Unwinds the reader by <paramref name="count"/> chars.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.ReadChar">
            <summary>
            Read the next char.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.ReadChars(System.Int32)">
            <summary>
            Read the next <paramref name="count"/> number of chars.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.ReadToEol">
            <summary>
            Read text up to the eol.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.ReadToken(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Read text up to the eol.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.CurrentCharIndex">
            <summary>
            Current position in text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.CurrentCharInt">
            <summary>
            An integer representation of the current char.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.IsToken">
            <summary>
            Determine if current char is token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.IsEscape">
            <summary>
            Determine if current char is escape char.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.IsEnd">
            <summary>
            Determine if the end of the text input has been reached.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.IsAtEnd">
            <summary>
            Determine if at last char.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.IsEol">
            <summary>
            Is End of line
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.IsEol(System.Collections.IDictionary)">
            <summary>
            Determine if current char is EOL.
            </summary>
            <param name="eolChars"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.IsWhiteSpace(System.Collections.IDictionary)">
            <summary>
            Determine if current char is whitespace.
            </summary>
            <param name="whitespaceChars"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.TokenReader.IsWhiteSpace">
            <summary>
            Determine if current char is whitespace.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Parsing.TokenReader.CurrentChar">
            <summary>
            Current char.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Parsing.TokenReader.PreviousChar">
            <summary>
            Get the previous char that was read in.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Parsing.TokenReader.EolChars">
            <summary>
            Get the end of line chars.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Parsing.TokenReader.PreviousCharAny">
            <summary>
            Get the previous char that is part of the input and which may be an escape char.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Reflection.AssemblyUtils">
            <summary>
            Assembly related reflection utils.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Reflection.AssemblyUtils.GetInternalFileContent(System.String,System.String)">
            <summary>
            Get the internal template content from the commonlibrary assembly.
            </summary>
            <param name="assemblyFolderPath">"CommonLibrary.Notifications.Templates."</param>
            <param name="fileName">"welcome.html"</param>
            <returns>String with internal template content.</returns>
        </member>
        <member name="T:Starsoft.Core.Encoders.ParameterEncoder">
            <summary>
            参数编码器
            </summary>
        </member>
        <member name="M:Starsoft.Core.Encoders.ParameterEncoder.AddLiteralPara(System.String,System.Boolean)">
            <summary>
            添加原始的字符参数
            </summary>
            <param name="parameter">参数值</param>
            <param name="encoded">是否编码</param>
            <returns>返回对象本省</returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.ParameterEncoder.AddLiteralPara(System.String)">
            <summary>
            添加原始的字符参数，注意字符串中不能包含"-"字符
            </summary>
            <param name="parameter">参数值</param>
            <returns>返回对象本省</returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.ParameterEncoder.AddPara(System.String)">
            <summary>
            添加字符型参数
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.ParameterEncoder.AddPara``1(System.Nullable{``0})">
            <summary>
            添加值类型参数，只支持基础的数据类型参数(基元类型、Decimal及DateTime)
            </summary>
            <typeparam name="T">添加值的类型</typeparam>
            <param name="parameter">要添加的值</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.ParameterEncoder.IsSupportType(System.Type)">
            <summary>
            获取是否为支持的类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.ParameterEncoder.ProcessSymbol(System.String)">
            <summary>
            处理特殊符号
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.ParameterEncoder.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Encoders.ParameterEncoder.ActualParameterCount">
            <summary>
            获取实际存储的参数数
            </summary>
        </member>
        <member name="P:Starsoft.Core.Encoders.ParameterEncoder.ParameterCount">
            <summary>
            获取所有的参数数
            </summary>
        </member>
        <member name="T:Starsoft.Core.Xml.XmlSerializerUtil">
            <summary>
            Serializes an object to xml.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Xml.XmlSerializerUtil.XmlSerialize``1(``0)">
            <summary>
            Serialize the object to xml.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Xml.XmlSerializerUtil.XmlSerialize(System.Object)">
            <summary>
            Serialize the object to xml.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Xml.XmlSerializerUtil.XmlDeserialize``1(System.String)">
            <summary>
            Deserialize from xml to the appropriate typed object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlData"></param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Collections.IIndexedComponent`1">
            <summary>
            Interface that any component must implement
            so that it can be indexed by an id or by a name.
            </summary>
            <typeparam name="TNumericKey"></typeparam>
        </member>
        <member name="T:Starsoft.Core.Collections.IIndexedLookUp`2">
            <summary>
            Interface for storing a collection of objects of type T,
            such that the objects can be looked up by either the
            id of the object T or by creating a distinct name for the object
            based on it's hashcode.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TNumericKey"></typeparam>
        </member>
        <member name="T:Starsoft.Core.Collections.IndexedLookUp`2">
            <summary>
            Indexed lookup class for storing objects of type T which can
            be retrieved by either an id or name.
            </summary>
            <typeparam name="TNumericKey"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Starsoft.Core.Collections.IndexedLookUp`2.#ctor(System.Collections.Generic.IList{`1})">
            <summary>
            Generic based lookup.
            </summary>
            <param name="allItems"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.IndexedLookUp`2.Initialize(System.Collections.Generic.IList{`1})">
            <summary>
            Initialize the internal lookup tables with the items.
            Store them by id and name.
            </summary>
            <param name="allItems"></param>
        </member>
        <member name="P:Starsoft.Core.Collections.IndexedLookUp`2.Item(`0)">
            <summary>
            Returns the location item given the id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.IndexedLookUp`2.Item(System.String)">
            <summary>
            Returns the location item given the full name ("New York") or abbr ( "NY" )
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.IndexedLookUp`2.Count">
            <summary>
            Get the number of items in this lookup.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Collections.IEnumeratorCountable`1">
            <summary>
            Extension to enumerator with extended methods to indicate if last or first item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Starsoft.Core.Collections.IEnumeratorCountable`1.IsFirst">
            <summary>
            Indicate if current item is first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.IEnumeratorCountable`1.IsLast">
            <summary>
            Indicate if current item is last.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.IEnumeratorCountable`1.IsEmpty">
            <summary>
            Indicates if the enumerator is empty ( it has 0 other ).
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.IEnumeratorCountable`1.CurrentIndex">
            <summary>
            Get the index of the current item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.IEnumeratorCountable`1.Count">
            <summary>
            Get the total number of other.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Collections.EnumeratorCountable`1">
            <summary>
            Extension to enumerator with extended methods to indicate if last or first item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Starsoft.Core.Collections.EnumeratorCountable`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initialize the list.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.EnumeratorCountable`1.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.EnumeratorCountable`1.MoveNext">
            <summary>
            Move to the next item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.EnumeratorCountable`1.Reset">
            <summary>
            Reset the iterator to first item.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.EnumeratorCountable`1.IsFirst">
            <summary>
            Indicates if current item is first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.EnumeratorCountable`1.IsLast">
            <summary>
            Indicates if current item is last.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.EnumeratorCountable`1.Current">
            <summary>
            Get the current item.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.EnumeratorCountable`1.System#Collections#IEnumerator#Current">
            <summary>
            Get the current item in list.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.EnumeratorCountable`1.CurrentIndex">
            <summary>
            Get the index of the current item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.EnumeratorCountable`1.Count">
            <summary>
            Get the total other in the internal list.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.EnumeratorCountable`1.IsEmpty">
            <summary>
            Indicate if there are other to iterate over.
            </summary>
        </member>
        <member name="T:Starsoft.Core.StringUtils">
            <summary>
            表示字符串实用工具类
            </summary>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Trim(System.String)">
            <summary>
            从字符串值开始和末尾移除所有空白字符后保留的字符串，如果字符串值为空或<c>null</c>则返回空
            </summary>
            <param name="value">字符串值</param>
            <returns>从字符串值开始和末尾移除所有空白字符后保留的字符串</returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.ConvertValue``1(System.String)">
            <summary>
            将字符串值去除首尾空格转换为指定类型的值，如果字符串值为空或null，则返回值类型对应的默认值
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="value">字符串值</param>
            <returns>如果能转换则返回转换后值类型的值，否则返回指定的默认值</returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.ConvertValue``1(System.String,``0)">
            <summary>
            将字符串值去除首尾空格转换为指定类型的值，如果字符串值为空或null，则返回缺省值
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="value">字符串值</param>
            <param name="defaultValue">缺省值</param>
            <returns>如果能转换则返回转换后值类型的值，否则返回指定的默认值</returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.ConvertNullableValue``1(System.String)">
            <summary>
            将字符串值去除首尾空格转换为指定类型的值，如果字符串值为空或null，则返回返回<c>null</c>
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="value">字符串值</param>
            <returns>如果能转换则返回转换后值类型的值，否则返回<c>null</c></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.ReadLines(System.String)">
            <summary>
            Read all the lines in the string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Join(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Join string enumeration other.
            </summary>
            <param name="items"></param>
            <param name="delimeter"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.ConvertToString(System.Object[])">
            <summary>
            Converts to string.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.ToStringArray(System.String,System.Char)">
            <summary>
            Parses a delimited list of other into a string[].
            </summary>
            <param name="delimitedText">"1,2,3,4,5,6"</param>
            <param name="delimeter">','</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.GetIndexOfSpacer(System.String,System.Int32,System.Boolean@)">
            <summary>
            Get the index of a spacer ( space" " or newline )
            </summary>
            <param name="txt"></param>
            <param name="currentPosition"></param>
            <param name="isNewLine"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.CreateGuid(System.String)">
            <summary>
            调用，比如StringHelper.CreateGuid("D");
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.AsciiToUnicode(System.Int32)">
            <summary>
            
            </summary>
            <param name="asciiCode"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Chop(System.String,System.Int32)">
            <summary>
            从一个字符串末尾移除指定数目的字符
            </summary>
            <param name="s"></param>
            <param name="removeFromEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Chop(System.String,System.String)">
            <summary>
            从一个字符串移除字符backDownTo最后一个匹配项的索引位置开始的所有后面的字符
            </summary>
            <param name="s"></param>
            <param name="backDownTo"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Clip(System.String,System.Int32)">
            <summary>
            从一个字符串首移除指定数目的字符
            </summary>
            <param name="s"></param>
            <param name="removeFromBeginning"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Clip(System.String,System.String)">
            <summary>
            从一个字符串移除字符removeUpTo第一个匹配项的索引位置开始的所有前面的字符
            </summary>
            <param name="s"></param>
            <param name="removeUpTo"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Chop(System.String)">
            <summary>
            从字符中中移除最后一个字符
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Clip(System.String)">
            <summary>
            从字符中中移除第一个字符
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Crop(System.String,System.String,System.String)">
            <summary>
            返回位于文本startText和endText之间的字符
            </summary>
            <param name="input"></param>
            <param name="startText">The text from which to start the crop</param>
            <param name="endText">The endpoint of the crop</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Squeeze(System.String)">
            <summary>
            移除单词之间的多余空格，即使单词之间只留一个空格
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.ToWords(System.String)">
            <summary>
            创建一个基于词在句中的字符串数组
            </summary>
            <param name="s">The string to parse</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.ClearBR(System.String)">
            <summary>
            清除给定字符串中的回车及换行符
            </summary>
            <param name="str">要清除的字符串</param>
            <returns>清除后返回的字符串</returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Strip(System.String,System.String)">
            <summary>
            将字符文本input中包含字符stripValue中的以逗号分隔的字符过滤掉 
            </summary>
            <param name="input">The input text</param>
            <param name="stripValue">The strip value.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Split(System.String)">
            <summary>
            将字符list以", " 或 ","分隔为数组
            </summary>
            <param name="list">A list of values separated by either ", " or ","</param>
        </member>
        <member name="M:Starsoft.Core.StringUtils.SplitString(System.String,System.String)">
            <summary>
            将字符strContent以strSplit分隔为数组
            </summary>
        </member>
        <member name="M:Starsoft.Core.StringUtils.SplitString(System.String,System.String,System.Int32)">
            <summary>
            将字符strContent以strSplit分隔为指定维数的数组，多余的移除，不足以空字符填充数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.FastReplace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            快速查找替换
            </summary>
            <param name="original"></param>
            <param name="pattern"></param>
            <param name="replacement"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            替换任何匹配find的词为replaceWith
            </summary>
            <param name="word">The string to check against.</param>
            <param name="find">A comma separated list of values to replace.</param>
            <param name="replaceWith">The value to replace with.</param>
            <param name="removeUnderscores">Whether or not underscores will be kept.</param>
        </member>
        <member name="M:Starsoft.Core.StringUtils.StartsWith(System.String,System.String)">
            <summary>
            是否在Word中能匹配list中使用逗号分隔的字符
            </summary>
            <param name="word">The string to check against.</param>
            <param name="list">A comma separted list of values to find.</param>
            <returns>true if a match is found or list is empty, otherwise false.</returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.GetStringLength(System.String)">
            <summary>
            返回字符串字节长度, 1个汉字长度为2
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Trim(System.String,System.Int32)">
            <summary>
            按字节长度截取指定长度的字符串
            </summary>
            <param name="rawString"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Trim(System.String,System.Int32,System.String)">
            <summary>
            按字节长度截取指定长度的字符串
            </summary>
            <param name="rawString">待截取的字符串</param>
            <param name="maxLength">截取长度</param>
            <param name="tailString">添加的后缀字符串</param>
            <returns>返回截取后的字符串</returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.IsMatch(System.String,System.String)">
            <summary>
            判断两个字符是否相等的
            </summary>
            <param name="stringA"></param>
            <param name="stringB"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.IsMatch(System.String,System.String,System.Boolean)">
            <summary>
            判断两个字符是否相等的
            </summary>
            <param name="stringA"></param>
            <param name="stringB"></param>
            <param name="trimStrings">是否去除首尾空格</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.IsRegexMatch(System.String,System.String)">
            <summary>
            是否匹配正则表达式的
            </summary>
            <param name="inputString"></param>
            <param name="matchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.StripWhitespace(System.String)">
            <summary>
            去除空白字符
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.IsStringNumeric(System.String)">
            <summary>
            判断字符是否为数字
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.JavaScriptEscape(System.String)">
            <summary>
            Escapes JavaScript with Url encoding and returns the encoded string.  
            </summary>
            <remarks>
            Converts quotes, single quotes and CR/LFs to their representation as an escape character.
            </remarks>
            <param name="content">The text to URL encode and escape JavaScript within.</param>
            <returns>The URL encoded and JavaScript escaped text.</returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.StrFilter(System.String,System.String)">
            <summary>
            进行指定的替换(脏字过滤) 将字符文本bantext（形式为 a=b的行集合）拆分，把所有字符str中的a替换为b
            </summary>
        </member>
        <member name="M:Starsoft.Core.StringUtils.ROT13Encode(System.String)">
            <summary>
            用ROT13方法编码字符
            </summary>
            <param name="inputText"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.CleanSearchString(System.String)">
            <summary>
            处理查询字符串
            </summary>
            <param name="searchString"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.Substitute(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Substitute the placeholders ${name} where name is the key in <paramref name="substitutions"/>
            and replace it with the value associated with the key.
            </summary>
            <param name="subsitutions"></param>
            <param name="contentPlaceholders"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.HexToByteArray(System.String)">
            <summary>
            Converts a hexadecimal string to a byte array representation.
            </summary>
            <param name="txt">Hexadecimal string to convert to byte array.</param>
            <returns>Byte array representation of the string.</returns>
            <remarks>The string is assumed to be of even size.</remarks>
        </member>
        <member name="M:Starsoft.Core.StringUtils.ByteArrayToHex(System.Byte[])">
            <summary>
            Converts a byte array to a hexadecimal string representation.
            </summary>
            <param name="b">Byte array to convert to hexadecimal string.</param>
            <returns>String representation of byte array.</returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.DecimalToHex(System.String)">
            <summary>
            Returns the hexadecimal representation of a decimal number.
            </summary>
            <param name="txt">Hexadecimal string to convert to decimal.</param>
            <returns>Decimal representation of string.</returns>
        </member>
        <member name="M:Starsoft.Core.StringUtils.IsHex(System.String)">
            <summary>
            Determines whether the string contains valid hexadecimal characters only.
            </summary>
            <param name="txt">String to check.</param>
            <returns>True if the string contains valid hexadecimal characters.</returns>
            <remarks>An empty or null string is considered to <b>not</b> contain
            valid hexadecimal characters.</remarks>
        </member>
        <member name="M:Starsoft.Core.StringUtils.ReplaceChars(System.String,System.String,System.String)">
            <summary>
            Replaces the characters in the originalChars string with the
            corresponding characters of the newChars string.
            </summary>
            <param name="txt">String to operate on.</param>
            <param name="originalChars">String with original characters.</param>
            <param name="newChars">String with replacement characters.</param>
            <example>For an original string equal to "123456654321" and originalChars="35" and
            newChars "AB", the result will be "12A4B66B4A21".</example>
            <returns>String with replaced characters.</returns>
        </member>
        <member name="T:Starsoft.Core.Encoders.Base64">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Encoders.Base64.Encode(System.Byte[])">
             encode the input data producing a base 64 encoded byte array.
            
             @return a byte array containing the base 64 encoded data.
        </member>
        <member name="M:Starsoft.Core.Encoders.Base64.Encode(System.Byte[],System.IO.Stream)">
             Encode the byte data to base 64 writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Starsoft.Core.Encoders.Base64.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             Encode the byte data to base 64 writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:Starsoft.Core.Encoders.Base64.Decode(System.Byte[])">
             decode the base 64 encoded input data. It is assumed the input data is valid.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Starsoft.Core.Encoders.Base64.Decode(System.String)">
             decode the base 64 encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:Starsoft.Core.Encoders.Base64.Decode(System.String,System.IO.Stream)">
             decode the base 64 encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:Starsoft.Core.CatalogSupport.BasalCatalogHelper">
            <summary>
            最多为6级分类，每个分类最多128个小类
            </summary>
        </member>
        <member name="F:Starsoft.Core.CatalogSupport.BasalCatalogHelper.Yard">
            <summary>
            分类特征码
            特征码1计算公式：2^N-2^(N-(N1+N2+…+Ni))
            特征码2计算公式：2^(N-(N1+N2+…+Ni))-1
            </summary>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.BasalCatalogHelper.GetCodeOfFather(System.Int64)">
            <summary>
            返回当前编码的父编码
            </summary>
            <param name="nodeCode">节点编码</param>
            <returns>当前编码的父编码，如果没有父编码则返回0</returns>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.BasalCatalogHelper.GetCodeOfLevelNode(System.Int32,System.Int64)">
            <summary>
            取得第level层次的父级的编码,0表示为一级目录
            </summary>
            <param name="level">要取的第level层次数</param>
            <param name="nodeCode">节点编码</param>
            <returns>取到的第level层次的父级的编码</returns>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.BasalCatalogHelper.GetLevelOfNode(System.Int64)">
            <summary>
            取得编码所在的级别,0表示为一级目录
            </summary>
            <param name="nodeCode">节点编码</param>
            <returns>取得编码所在的级别,0表示为一级目录</returns>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.BasalCatalogHelper.GetMaxCodeOfNode(System.Int64)">
            <summary>
            取得编码级别的最大节点
            </summary>
            <param name="nodeCode">节点编码</param>
            <returns>返回当前节点的最大编码的兄弟节点</returns>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.BasalCatalogHelper.GetNewCodeOfNode(System.Int64,System.Int32)">
            <summary>
            根据父节点返回当前可用的子节点编码
            </summary>
            <param name="fatherCode">父类编码，如果无父类编码，则编码为0</param>
            <param name="index">在当前分类的顺序索引号，从0开始</param>
            <returns>如果大于最大分类级数(6级)则返回-1,如果大于每级分类的最多小类数则返回-2</returns>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.BasalCatalogHelper.GetNewCodeOfNode(System.Int64,System.Int32,System.Int32@)">
            <summary>
            根据父节点返回当前可用的子节点编码
            </summary>
            <param name="fatherCode">父类编码，如果无父类编码，则编码为0</param>
            <param name="index">在当前分类的顺序索引号，从0开始</param>
            <param name="level">返回当前可用子节点的层级，从0开始编码</param>
            <returns>如果大于最大分类级数(6级)则返回-1,如果大于每级分类的最多小类数则返回-2</returns>
        </member>
        <member name="T:Starsoft.Core.Notifications.NotificationSettings">
            <summary>
            Notification configuration.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Notifications.NotificationSettings.#ctor">
            <summary>
            Default constructor to support dependency injection of properties by Spring.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Notifications.NotificationSettings.#ctor(System.Boolean,System.String,System.Int32)">
            <summary>
            initialize using supplied settings.
            </summary>
            <param name="enableNotifications"></param>
            <param name="from"></param>
            <param name="intervalSchedule"></param>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationSettings.Item(System.String)">
            <summary>
            Get/set additional values.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationSettings.Settings">
            <summary>
            Provide read-only access to settings.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationSettings.TemplateFolderPath">
            <summary>
            The folder location for the templates.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationSettings.From">
            <summary>
            From.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationSettings.WebSiteUrl">
            <summary>
            Url of the website.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationSettings.WebSiteUrlForPost">
            <summary>
            Url for looking at a specific post 
            </summary>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationSettings.EnableNotifications">
            <summary>
            Flag to enable/disable notifications.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationSettings.NumberOfMessagesToProcessAtOnce">
            <summary>
            Number of messages to send per batch.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationSettings.IntervalSchedule">
            <summary>
            How often to check for and send messages.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationSettings.FeedBackEmail">
            <summary>
            The email to use to send user feedback to.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationSettings.DebugOutputMessageToFile">
            <summary>
            For debugging purposes, whether or not to debug messages to file.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationSettings.DebugOutputMessageFolderPath">
            <summary>
            Location of debug messages.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationSettings.DebugSleepIfNotEnabled">
            <summary>
            Flag to simulate sending emails by sleeping thread.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationSettings.DebugSleepTimeIfNotEnabled">
            <summary>
            Amount of time to simulate sending.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationSettings.LogMessage">
            <summary>
            Log message for errors.
            </summary>
        </member>
        <member name="T:Starsoft.Core.ActionCall">
            <summary>
            封装一个方法，该方法不具有参数并且不返回值
            </summary>
        </member>
        <member name="T:Starsoft.Core.ActionCall`2">
            <summary>
            封装一个方法，该方法具有两个参数并且不返回值
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数</param>
            <param name="arg2">此委托封装的方法的第二个参数</param>
        </member>
        <member name="T:Starsoft.Core.ActionCall`3">
            <summary>
            封装一个方法，该方法具有三个参数并且不返回值。
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型。</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型。</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型。</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数。</param>
            <param name="arg2">此委托封装的方法的第二个参数。</param>
            <param name="arg3">此委托封装的方法的第三个参数。</param>
        </member>
        <member name="T:Starsoft.Core.FuncCall`1">
            <summary>
            封装一个不具有参数但却返回 TResult 参数指定的类型值的方法
            </summary>
            <typeparam name="TResult">此委托封装的方法的返回值类型</typeparam>
            <returns>此委托封装的方法的返回值</returns>
        </member>
        <member name="T:Starsoft.Core.FuncCall`2">
            <summary>
            封装一个具有一个参数并返回 TResult 参数指定的类型值的方法
            </summary>
            <typeparam name="T">此委托封装的方法的参数类型</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型</typeparam>
            <param name="arg">此委托封装的方法的参数</param>
            <returns>此委托封装的方法的返回值</returns>
        </member>
        <member name="T:Starsoft.Core.FuncCall`3">
            <summary>
            
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数</param>
            <param name="arg2">此委托封装的方法的第二个参数</param>
            <returns>此委托封装的方法的返回值</returns>
        </member>
        <member name="T:Starsoft.Core.FuncCall`4">
            <summary>
            
            </summary>
            <typeparam name="T1">此委托封装的方法的第一个参数类型</typeparam>
            <typeparam name="T2">此委托封装的方法的第二个参数类型</typeparam>
            <typeparam name="T3">此委托封装的方法的第三个参数类型</typeparam>
            <typeparam name="TResult">此委托封装的方法的返回值类型</typeparam>
            <param name="arg1">此委托封装的方法的第一个参数</param>
            <param name="arg2">此委托封装的方法的第二个参数</param>
            <param name="arg3">此委托封装的方法的第三个参数</param>
            <returns>此委托封装的方法的返回值</returns>
        </member>
        <member name="T:Starsoft.Core.EmailSupport.EmailService">
            <summary>
            Simple Email service.
            </summary>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Starsoft.Core.EmailSupport.EmailService"/> class.
            </summary>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailService.#ctor(System.Collections.IDictionary,System.String)">
            <summary>
            Initialize configuration using the configuration source supplied.
            The email service settings must be in a section named "EmailService".
            </summary>
            <param name="config"></param>
            <param name="emailServiceSectionName"></param>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailService.#ctor(Starsoft.Core.EmailSupport.IEmailSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Starsoft.Core.EmailSupport.EmailService"/> class.
            </summary>
            <param name="settings">The config.</param>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailService.Init(Starsoft.Core.EmailSupport.IEmailSettings)">
            <summary>
            Initialize the configuration.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailService.Send(Starsoft.Core.EmailSupport.EmailMessage)">
            <summary>
            Sends the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailService.Send(Starsoft.Core.EmailSupport.EmailMessage,System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
            Sends the message using the credentials and host/port supplied.
            </summary>
            <param name="message"></param>
            <param name="useCredentials"></param>
            <param name="credentialsUser"></param>
            <param name="credentialsPassword"></param>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailService.Send(Starsoft.Core.EmailSupport.NotificationMessage,System.String,System.String)">
            <summary>
            Sends the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="credentialsUser">The credentials user.</param>
            <param name="credentialsPassword">The credentials password.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailService.Send(Starsoft.Core.EmailSupport.NotificationMessage)">
            <summary>
            Sends the mail message.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailService.Send(System.Net.Mail.MailMessage,System.Boolean,System.String,System.String)">
            <summary>
            Mail the message using the native MailMessage class.
            </summary>
            <param name="message">The mail message</param>
            <param name="useCredentials">Whether or not to use credentials for security when sending emails.</param>
            <param name="credentialsUser">User name when using credentials.</param>
            <param name="credentialsPassword">Password when using credentials.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailService.Send(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Mail the message using the native MailMessage class.
            </summary>
            <param name="from">Who the email is from.</param>
            <param name="to">Who the email is being sent to.</param>
            <param name="subject">Subject of email.</param>
            <param name="body">Email body.</param>
            <param name="useCredentials">Whether or not to use credentials for security when sending emails.</param>
            <param name="credentialsUser">User name when using credentials.</param>
            <param name="credentialsPassword">Password when using credentials.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailService.Send(System.Net.Mail.MailMessage)">
            <summary>
            Mail the message using the native MailMessage class and the credentials from the current configuration.
            </summary>
            <param name="mailMessage">The mail message</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailService.InternalSend(System.Net.Mail.MailMessage,System.Boolean,System.String,System.String)">
            <summary>
            Internals the send.
            </summary>
            <param name="mailMessage">The message.</param>
            <param name="useCredentials">if set to <c>true</c> [use credentials].</param>
            <param name="credentialsUser">The credentials user.</param>
            <param name="credentialsPassword">The credentials password.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailService.InternalSend(System.Net.Mail.MailMessage,System.Boolean,System.String,System.String,System.String,System.Int32)">
            <summary>
            Internals the send.
            </summary>
            <param name="mailMessage">The message.</param>
            <param name="useCredentials">if set to <c>true</c> [use credentials].</param>
            <param name="smtpuser">The credentials user.</param>
            <param name="smtppassword">The credentials password.</param>
            <param name="smtphost">Smtp Host</param>
            <param name="smtpport">Port number</param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.EmailService.Logger">
            <summary>
            Get / Set the logger for errors.
            </summary>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.EmailService.Settings">
            <summary>
            The email service configuration object.
            </summary>
        </member>
        <member name="T:Starsoft.Core.BoolMessage">
            <summary>
            Combines a boolean succes/fail flag with a error/status message.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BoolMessage.True">
            <summary>
            True message.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BoolMessage.False">
            <summary>
            False message.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BoolMessage.Success">
            <summary>
            Success / failure ?
            </summary>
        </member>
        <member name="F:Starsoft.Core.BoolMessage.Message">
            <summary>
            Error message for failure, status message for success.
            </summary>
        </member>
        <member name="M:Starsoft.Core.BoolMessage.#ctor(System.Boolean,System.String)">
            <summary>
            Set the readonly fields.
            </summary>
            <param name="success">Flag for message to set.</param>
            <param name="message">Message to set for flag.</param>
        </member>
        <member name="T:Starsoft.Core.BoolMessageItem">
            <summary>
            Combines a boolean succes/fail flag with a error/status message and an object.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BoolMessageItem._item">
            <summary>
            Item associated with boolean message.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BoolMessageItem.True">
            <summary>
            True message.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BoolMessageItem.False">
            <summary>
            False message.
            </summary>
        </member>
        <member name="M:Starsoft.Core.BoolMessageItem.#ctor(System.Object,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Starsoft.Core.BoolMessageItem`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Starsoft.Core.BoolMessageItem.Item">
            <summary>
            Return readonly item.
            </summary>
        </member>
        <member name="T:Starsoft.Core.BoolMessageEx">
            <summary>
            Tuple to store boolean, string message, and Exception object.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BoolMessageEx.True">
            <summary>
            True message.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BoolMessageEx.False">
            <summary>
            False message.
            </summary>
        </member>
        <member name="M:Starsoft.Core.BoolMessageEx.#ctor(System.Boolean,System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Starsoft.Core.BoolMessageItem`1"/> class.
            </summary>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="ex">The exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Starsoft.Core.BoolMessageEx.Ex">
            <summary>
            Return readonly item.
            </summary>
        </member>
        <member name="T:Starsoft.Core.BoolMessageItem`1">
            <summary>
            Combines a boolean succes/fail flag with a error/status message and an object.
            </summary>
            <typeparam name="T">Type of object combined with a boolean flag.</typeparam>
        </member>
        <member name="M:Starsoft.Core.BoolMessageItem`1.#ctor(`0,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Starsoft.Core.BoolMessageItem`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Starsoft.Core.BoolMessageItem`1.Item">
            <summary>
            Return item as correct type.
            </summary>
        </member>
        <member name="T:Starsoft.Core.BoolResult`1">
            <summary>
            Combines a boolean succes/fail flag with a error/status message, 
            an object and validation results.
            </summary>
            <typeparam name="T">Type of object combined with a boolean flag.</typeparam>
        </member>
        <member name="F:Starsoft.Core.BoolResult`1.False">
            <summary>
            Empty false result.
            </summary>
        </member>
        <member name="F:Starsoft.Core.BoolResult`1.True">
            <summary>
            Empty True result.
            </summary>
        </member>
        <member name="M:Starsoft.Core.BoolResult`1.#ctor(`0,System.Boolean,System.String,Starsoft.Core.IValidationResults)">
            <summary>
            Initializes a new instance of the <see cref="T:Starsoft.Core.BoolMessageItem`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="message">The message.</param>
            <param name="errors">List of validation errors messages.</param>
        </member>
        <member name="P:Starsoft.Core.BoolResult`1.Errors">
            <summary>
            List of errors from performing some action.
            </summary>
        </member>
        <member name="T:Starsoft.Core.BoolErrorsItem">
            <summary>
            Class to store success/fail message, error collection and some result object(T).
            </summary>
        </member>
        <member name="F:Starsoft.Core.BoolErrorsItem._errors">
            <summary>
            List of errors from performing some action.
            </summary>
        </member>
        <member name="M:Starsoft.Core.BoolErrorsItem.#ctor(System.Object,System.Boolean,System.String,Starsoft.Core.IErrors)">
            <summary>
            Initializes a new instance of the <see cref="T:Starsoft.Core.BoolMessageItem`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="message">The message.</param>
            <param name="errors">The errors</param>
        </member>
        <member name="P:Starsoft.Core.BoolErrorsItem.Errors">
            <summary>
            List of errors from performing some action.
            </summary>
        </member>
        <member name="T:Starsoft.Core.BoolErrorsItem`1">
            <summary>
            Bool result with error collection and resulting item with typed access.
            </summary>
            <typeparam name="T">Type of item to use.</typeparam>
        </member>
        <member name="M:Starsoft.Core.BoolErrorsItem`1.#ctor(`0,System.Boolean,System.String,Starsoft.Core.IValidationResults)">
            <summary>
            Initializes a new instance of the <see cref="T:Starsoft.Core.BoolMessageItem`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="message">The message.</param>
            <param name="errors">List of validation errors.</param>
        </member>
        <member name="P:Starsoft.Core.BoolErrorsItem`1.Item">
            <summary>
            Return item as correct type.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Reflection.AttributeHelper">
            <summary>
            Reflection utility class for attributes.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Reflection.AttributeHelper.GetAssemblyInfoDescription(System.Type,System.String)">
            <summary>
            Get the description attribute from the assembly associated with <paramref name="type"/>
            </summary>
            <param name="type">The type who's assembly's description should be obtained.</param>
            <param name="defaultVal">Default value to use if description is not available.</param>
            <returns>String with assembly information description.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.AttributeHelper.GetClassAttributes``1(System.Object)">
            <summary>
            Gets the attributes of the specified type applied to the class.
            </summary>
            <typeparam name="T">Type of attributes to look for.</typeparam>
            <param name="obj">The obj.</param>
            <returns>List with class custom attributes.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.AttributeHelper.GetClassAttributesFromAssembly``1(System.String,System.Action{System.Collections.Generic.KeyValuePair{System.Type,``0}})">
            <summary>
            Loads widgets from the assembly name supplied.
            </summary>
            <typeparam name="T">Type of attributes to look for.</typeparam>
            <param name="assemblyName">The name of the assembly to load widgets from.</param>
            <param name="action">A callback for the datatype and widgetattribute.</param>
            <returns>List with key/value pair with attributes.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.AttributeHelper.GetPropsWithAttributes``1(System.Object)">
            <summary>
            Get a list of property info's that have the supplied attribute applied to it.
            </summary>
            <typeparam name="T">Type of attributes to look for.</typeparam>
            <param name="obj">Object to look into.</param>
            <returns>Pair of key/value items with properties.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.AttributeHelper.GetPropsOnlyWithAttributes``1(System.Object)">
            <summary>
            Get a list of property info's that have the supplied attribute applied to it.
            </summary>
            <typeparam name="T">Type of attributes to look for.</typeparam>
            <param name="obj">Object to look into.</param>
            <returns>List of properties found.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.AttributeHelper.GetPropsWithAttributesList``1(System.Object)">
            <summary>
            Get a list of property info's that have the supplied attribute applied to it.
            </summary>
            <typeparam name="T">Type of attribute to look for.</typeparam>
            <param name="obj">Object to look into.</param>
            <returns>List with key/value pairs with property info.</returns>
        </member>
        <member name="M:Starsoft.Core.Reflection.AttributeHelper.GetPropertiesWithAttributesOnTypes``1(System.Collections.Generic.IList{System.Type},Starsoft.Core.ActionCall{System.Type,System.Collections.Generic.KeyValuePair{System.Reflection.PropertyInfo,``0}})">
            <summary>
            Gets all the properties associated with the supplied types that have the attribute applied to them.
            </summary>
            <typeparam name="TPropAttrib">The type of the attribute that properties should have</typeparam>
            <param name="types">The list of types to search properties for.</param>
            <param name="action">Callback</param>
            <returns>List with key/value pairs with property info.</returns>
        </member>
        <member name="T:Starsoft.Core.NumberUtils">
            <summary>
            表示数字实用工具类
            </summary>
        </member>
        <member name="M:Starsoft.Core.NumberUtils.IsNaturalNumber(System.String)">
            <summary>
            Determines whether [is natural number] [the specified s item].
            </summary>
            <param name="sItem">The s item.</param>
            <returns>
            	<c>true</c> if [is natural number] [the specified s item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Starsoft.Core.NumberUtils.IsWholeNumber(System.String)">
            <summary>
            Determines whether [is whole number] [the specified s item].
            </summary>
            <param name="sItem">The s item.</param>
            <returns>
            	<c>true</c> if [is whole number] [the specified s item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Starsoft.Core.NumberUtils.IsInteger(System.String)">
            <summary>
            Determines whether the specified s item is integer.
            </summary>
            <param name="sItem">The s item.</param>
            <returns>
            	<c>true</c> if the specified s item is integer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Starsoft.Core.NumberUtils.IsNumber(System.String)">
            <summary>
            Determines whether the specified s item is number.
            </summary>
            <param name="sItem">The s item.</param>
            <returns>
            	<c>true</c> if the specified s item is number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Starsoft.Core.NumberUtils.IsEven(System.Int32)">
            <summary>
            Determines whether the specified value is an even number.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is even; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Starsoft.Core.NumberUtils.IsOdd(System.Int32)">
            <summary>
            Determines whether the specified value is an odd number.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is odd; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Starsoft.Core.NumberUtils.Random(System.Boolean)">
            <summary>
            Generates a random number
            </summary>
            <param name="noZeros"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.NumberUtils.Random(System.Int32)">
            <summary>
            Generates a random number with an upper bound
            </summary>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.NumberUtils.Random(System.Int32,System.Int32)">
            <summary>
            Generates a random number between the specified bounds
            </summary>
            <param name="low"></param>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.NumberUtils.Random">
            <summary>
            Generates a random double
            </summary>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Logging.Logger">
            <summary>
            Light weight logging class.
            </summary>
            <remarks>
            The provider is initialize to an instance of <see cref="T:Starsoft.Core.Logging.LogConsole"/>
            so it's ready be used immediately.
            </remarks>
        </member>
        <member name="F:Starsoft.Core.Logging.Logger._loggers">
            <summary>
            Default the logger provider to the consolelogger so the logger
            is ready to use immediately.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.#ctor">
            <summary>
            Prevent instantiation. This is a static class.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Log(Starsoft.Core.Logging.LogLevel,System.Object)">
            <summary>
            Logs the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Log(Starsoft.Core.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Logs the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Log(Starsoft.Core.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the specified level.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Warn(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Warn(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Warn(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Error(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Error(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Error(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Debug(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Debug(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Debug(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Fatal(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Fatal(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Fatal(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Info(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Info(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Info(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Message(System.Object)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Message(System.Object,System.Exception)">
            <summary>
            Logs as info.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Message(System.Object,System.Exception,System.Object[])">
            <summary>
            Logs the message with exception and arguments.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.IsEnabled(System.String,Starsoft.Core.Logging.LogLevel)">
            <summary>
            Determine if the loglevel is enabled for the following 
            </summary>
            <param name="loggerName">The name of the logger to check loglevel for.</param>
            <param name="logLevel">The log level.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.GetNew``1">
            <summary>
            Get a logger. 
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.GetNew``1(System.String)">
            <summary>
            Get a new logger and associate with the type specified.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="loggerName"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Add(Starsoft.Core.Logging.ILogMulti)">
            <summary>
            Add a named logger.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Clear">
            <summary>
            Clear all the loggers and add only the Console logger to the 
            the default logger.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Get(System.String)">
            <summary>
            Get the named logger using the string indexer.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Get(System.Int32)">
            <summary>
            Get the named logger using the string indexer.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Init(Starsoft.Core.Logging.ILogMulti)">
            <summary>
            Initialize the default logger.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.Flush">
            <summary>
            Flushes the buffers.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.ShutDown">
            <summary>
            Shutdown all loggers.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.GetLogInfo">
            <summary>
            Get all the log files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.ExecuteRead(Starsoft.Core.ActionCall)">
            <summary>
            Exectutes the action under a read operation after
            aquiring the reader lock.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.ExecuteWrite(Starsoft.Core.ActionCall)">
            <summary>
            Exectutes the action under a write operation after
            aquiring the writer lock.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.AcquireReaderLock">
            <summary>
            Gets the reader lock.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.ReleaseReaderLock">
            <summary>
            Release the reader lock.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.AcquireWriterLock">
            <summary>
            Acquire the writer lock.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.Logger.ReleaseWriterLock">
            <summary>
            Release the writer lock.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Logging.Logger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether default logger is debug enabled.
            </summary>
            <value>
            	<c>true</c> if default logger is debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Logging.Logger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether default logger is error enabled.
            </summary>
            <value>
            	<c>true</c> if default logger is error enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Logging.Logger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether default logger is fatal enabled.
            </summary>
            <value>
            	<c>true</c> if default logger is fatal enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Logging.Logger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether default logger is info enabled.
            </summary>
            <value>
            	<c>true</c> if default logger is info enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Logging.Logger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether default logger is warn enabled.
            </summary>
            <value>
            	<c>true</c> if default logger is warn enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.Logging.Logger.Default">
            <summary>
            Get the default logger.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Logging.Logger.Count">
            <summary>
            Get the number of the loggers.
            </summary>
        </member>
        <member name="T:Starsoft.Core.EnumerableUtils">
            <summary>
            表示枚举的实用工具类
            </summary>
        </member>
        <member name="M:Starsoft.Core.EnumerableUtils.ContainsKey(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            判断集合是否包含指定的键
            </summary>
        </member>
        <member name="M:Starsoft.Core.EnumerableUtils.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Execute action on each item in enumeration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="action"></param>
        </member>
        <member name="M:Starsoft.Core.EnumerableUtils.ToDictionary``1(System.Collections.Generic.IList{``0})">
            <summary>
            Check if all of the other in the collection satisfied by the condition.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.EnumerableUtils.JoinDelimited``1(System.Collections.Generic.IList{``0},System.String,Starsoft.Core.FuncCall{``0,System.String})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="delimeter"></param>
            <param name="appender"></param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Collections.PropertyKey">
            <summary>
            Simple class to store and parse the propertyKeys.
            propertyKey = configObjectInstanceName.Key.
            e.g.
            1. "profileOptions.IsEnabled"
            2. "profileOptions.user1.PageSize"
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.PropertyKey.#cctor">
            <summary>
            Static constructor to create the null object.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.PropertyKey.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="group"></param>
            <param name="subGroup"></param>
            <param name="key"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.PropertyKey.BuildWithoutKey">
            <summary>
            Builds the path by only including the Group and SubGroup if applicable,
            without using the Key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.PropertyKey.ToString">
            <summary>
            Return the key in "Group.SubGroup.Key".
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.PropertyKey.BuildKey(System.String,System.String,System.String)">
            <summary>
            Builds the property key which is the combination of the group and the key.
            </summary>
            <param name="group"></param>
            <param name="subGroup"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.PropertyKey.BuildKey(System.String,System.String)">
            <summary>
            Builds the object key which is the combination of the group and the key.
            </summary>
            <param name="group"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.PropertyKey.Parse(System.String)">
            <summary>
            Parses the propertyKey string "name.Property" and returns a
            PropertyKey object with the name and property separate.
            </summary>
            <param name="propertyKey"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.PropertyKey.Empty">
            <summary>
            Gets the null object.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.PropertyKey.HasSubGroup">
            <summary>
            Whether or not this has a subgroup.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Encoders.BufferedDecoder">
            <summary>
             A buffering class to allow translation from one format to another to
                be done in discrete chunks.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Encoders.BufferedDecoder.#ctor(Starsoft.Core.Encoders.ITranslator,System.Int32)">
            <summary>
            Create a buffered Decoder.
            </summary>
            <param name="translator">The translater to use.</param>
            <param name="bufferSize">The size of the buffer.</param>
        </member>
        <member name="M:Starsoft.Core.Encoders.BufferedDecoder.ProcessByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Process one byte of data.
            </summary>
            <param name="input">Data in.</param>
            <param name="output">Byte array for the output.</param>
            <param name="outOff">The offset in the output byte array to start writing from.</param>
            <returns>The amount of output bytes.</returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.BufferedDecoder.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process data from a byte array.
            </summary>
            <param name="input">The input data.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="len">Amount of data to process from input data array.</param>
            <param name="outBytes">Array to store output.</param>
            <param name="outOff">Position in output array to start writing from.</param>
            <returns>The amount of output bytes.</returns>
        </member>
        <member name="T:Starsoft.Core.EnumDescription">
            <summary>
            把枚举值按照指定的文本显示
            <remarks>
            一般通过枚举值的ToString()可以得到变量的文本，
            但是有时候需要的到与之对应的更充分的文本，
            这个类帮助达到此目的
            Date: 2006-3-25 
            Author: dearzp@hotmail.com
            </remarks>
            </summary>
            <example>
            [EnumDescription("中文数字")]
            enum MyEnum
            {
            	[EnumDescription("数字一")]
            	One = 1, 
            
            	[EnumDescription("数字二")]
            	Two, 
            
            	[EnumDescription("数字三")]
            	Three
            }
            EnumDescription.GetEnumText(typeof(MyEnum));
            EnumDescription.GetFieldText(MyEnum.Two);
            EnumDescription.GetFieldTexts(typeof(MyEnum)); 
            </example>
        </member>
        <member name="M:Starsoft.Core.EnumDescription.#ctor(System.String,System.Int32)">
            <summary>
            描述枚举值
            </summary>
            <param name="enumDisplayText">描述内容</param>
            <param name="enumRank">排列顺序</param>
        </member>
        <member name="M:Starsoft.Core.EnumDescription.#ctor(System.String)">
            <summary>
            描述枚举值，默认排序为5
            </summary>
            <param name="enumDisplayText">描述内容</param>
        </member>
        <member name="M:Starsoft.Core.EnumDescription.GetEnumText(System.Type)">
            <summary>
            得到对枚举的描述文本
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.EnumDescription.GetFieldText(System.Object)">
            <summary>
            获得指定枚举类型中，指定值的描述文本。
            </summary>
            <param name="enumValue">枚举值，不要作任何类型转换</param>
            <returns>描述字符串</returns>
        </member>
        <member name="M:Starsoft.Core.EnumDescription.GetFieldTexts(System.Type)">
            <summary>
            得到枚举类型定义的所有文本，按定义的顺序返回
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <param name="enumType">枚举类型</param>
            <returns>所有定义的文本</returns>
        </member>
        <member name="M:Starsoft.Core.EnumDescription.GetFieldTexts(System.Type,Starsoft.Core.EnumDescription.SortType)">
            <summary>
            得到枚举类型定义的所有文本
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <param name="enumType">枚举类型</param>
            <param name="sortType">指定排序类型</param>
            <returns>所有定义的文本</returns>
        </member>
        <member name="P:Starsoft.Core.EnumDescription.EnumDisplayText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.EnumDescription.EnumRank">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.EnumDescription.EnumValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.EnumDescription.FieldName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starsoft.Core.EnumDescription.SortType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="F:Starsoft.Core.EnumDescription.SortType.Default">
             <summary>
            按枚举顺序默认排序
             </summary>
        </member>
        <member name="F:Starsoft.Core.EnumDescription.SortType.DisplayText">
            <summary>
            按描述值排序
            </summary>
        </member>
        <member name="F:Starsoft.Core.EnumDescription.SortType.Rank">
            <summary>
            按排序熵
            </summary>
        </member>
        <member name="T:Starsoft.Core.RandomUtils">
            <summary>
            随机字符
            </summary>
        </member>
        <member name="M:Starsoft.Core.RandomUtils.GetRndStrOfAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.RandomUtils.GetRndStrOfAll(System.Int32)">
            <summary>
            
            </summary>
            <param name="lenOf"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.RandomUtils.GetRndStrOnlyFor">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.RandomUtils.GetRndStrOnlyFor(System.Int32)">
            <summary>
            
            </summary>
            <param name="LenOf"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.RandomUtils.GetRndStrOnlyFor(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="useUpper"></param>
            <param name="useNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.RandomUtils.GetRndStrOnlyFor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="lenOf"></param>
            <param name="useUpper"></param>
            <param name="useNumber"></param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.CatalogSupport.CatalogHelper">
            <summary>
            最多为6级分类，每个分类最多256个小类
            </summary>
        </member>
        <member name="F:Starsoft.Core.CatalogSupport.CatalogHelper.Yard">
            <summary>
            分类特征码
            特征码1计算公式：2^N-2^(N-(N1+N2+…+Ni))
            特征码2计算公式：2^(N-(N1+N2+…+Ni))-1
            </summary>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.CatalogHelper.GetCodeOfFather(System.Int64)">
            <summary>
            返回当前编码的父编码
            </summary>
            <param name="nodeCode">节点编码</param>
            <returns>当前编码的父编码，如果没有父编码则返回0</returns>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.CatalogHelper.GetCodeOfLevelNode(System.Int32,System.Int64)">
            <summary>
            取得第level层次的父级的编码,0表示为一级目录
            </summary>
            <param name="level">要取的第level层次数</param>
            <param name="nodeCode">节点编码</param>
            <returns>取到的第level层次的父级的编码</returns>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.CatalogHelper.GetLevelOfNode(System.Int64)">
            <summary>
            取得编码所在的级别,0表示为一级目录
            </summary>
            <param name="nodeCode">节点编码</param>
            <returns>取得编码所在的级别,0表示为一级目录</returns>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.CatalogHelper.GetMaxCodeOfNode(System.Int64)">
            <summary>
            取得编码级别的最大节点
            </summary>
            <param name="nodeCode">节点编码</param>
            <returns>返回当前节点的最大编码的兄弟节点</returns>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.CatalogHelper.GetNewCodeOfNode(System.Int64,System.Int32)">
            <summary>
            根据父节点返回当前可用的子节点编码
            </summary>
            <param name="fatherCode">父类编码，如果无父类编码，则编码为0</param>
            <param name="index">在当前分类的顺序索引号，从0开始</param>
            <returns>如果大于最大分类级数(6级)则返回-1,如果大于每级分类的最多小类数则返回-2</returns>
        </member>
        <member name="M:Starsoft.Core.CatalogSupport.CatalogHelper.GetNewCodeOfNode(System.Int64,System.Int32,System.Int32@)">
            <summary>
            根据父节点返回当前可用的子节点编码
            </summary>
            <param name="fatherCode">父类编码，如果无父类编码，则编码为0</param>
            <param name="index">在当前分类的顺序索引号，从0开始</param>
            <param name="level">返回当前可用子节点的层级，从0开始编码</param>
            <returns>如果大于最大分类级数(6级)则返回-1,如果大于每级分类的最多小类数则返回-2</returns>
        </member>
        <member name="T:Starsoft.Core.Guard">
            <summary>
            Used for simple validations.
            </summary>      
        </member>
        <member name="M:Starsoft.Core.Guard.IsTrue(System.Boolean)">
            <summary>
            Check that the condition is true.
            </summary>
            <param name="condition">Condition to check.</param>
        </member>
        <member name="M:Starsoft.Core.Guard.IsTrue(System.Boolean,System.String)">
            <summary>
            Check that the condition is true and return error message provided.
            </summary>
            <param name="condition">Condition to check.</param>
            <param name="message">Error to use when throwing an <see cref="T:System.ArgumentException"/>
            if the condition is false.</param>
        </member>
        <member name="M:Starsoft.Core.Guard.IsFalse(System.Boolean)">
            <summary>
            Check that the condition is false.
            </summary>
            <param name="condition">Condition to check.</param>
        </member>
        <member name="M:Starsoft.Core.Guard.IsFalse(System.Boolean,System.String)">
            <summary>
            Check that the condition is false and return error message provided.
            </summary>
            <param name="condition">Condition to check.</param>
            <param name="message">Error to use when throwing an <see cref="T:System.ArgumentException"/>
            if the condition is false.</param>
        </member>
        <member name="M:Starsoft.Core.Guard.IsNotNull(System.Object,System.String)">
            <summary>
            Check that the object supplied is not null and throw exception
            with message provided.
            </summary>
            <param name="obj">Object to check</param>
            <param name="message">Error to use when throwing an <see cref="T:System.ArgumentNullException"/>
            if the condition is false.</param>
        </member>
        <member name="M:Starsoft.Core.Guard.IsNotNull(System.Object)">
            <summary>
            Check that the object provided is not null.
            </summary>
            <param name="obj">Object to check.</param>
        </member>
        <member name="M:Starsoft.Core.Guard.IsNull(System.Object,System.String)">
            <summary>
            Check that the object supplied is null and throw exception
            with message provided.
            </summary>
            <param name="obj">Object to check.</param>
            <param name="message">Error to use when throwing an <see cref="T:System.ArgumentNullException"/>
            if the condition is false.</param>
        </member>
        <member name="M:Starsoft.Core.Guard.IsNull(System.Object)">
            <summary>
            Check that the object provided is null.
            </summary>
            <param name="obj">Object to check.</param>
        </member>
        <member name="M:Starsoft.Core.Guard.IsOneOfSupplied``1(``0,System.Collections.Generic.List{``0})">
            <summary>
            Check that the supplied object is one of a list of objects.
            </summary>
            <typeparam name="T">Type of object to check.</typeparam>
            <param name="obj">Object to look for.</param>
            <param name="possibles">List with possible values for object.</param>
            <returns>True if the object is equal to one in the supplied list.
            Otherwise, <see cref="T:System.ArgumentException"/> is thrown.</returns>
        </member>
        <member name="M:Starsoft.Core.Guard.IsOneOfSupplied``1(``0,System.Collections.Generic.List{``0},System.String)">
            <summary>
            Check that the supplied object is one of a list of objects.
            </summary>
            <typeparam name="T">Type of object to check.</typeparam>
            <param name="obj">Object to look for.</param>
            <param name="possibles">List with possible values for object.</param>
            <param name="message">Message of exception to throw.</param>
            <returns>True if the object is equal to one in the supplied list.
            Otherwise, <see cref="T:System.ArgumentException"/> is thrown.</returns>
        </member>
        <member name="T:Starsoft.Core.EmailSupport.EmailServiceSettings">
            <summary>
            Email Settings
            </summary>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailServiceSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Starsoft.Core.EmailSupport.EmailServiceSettings"/> class.
            </summary>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailServiceSettings.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Starsoft.Core.EmailSupport.EmailServiceSettings"/> class.
            </summary>
            <param name="smtpService">The SMTP service.</param>
            <param name="port">The port.</param>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.EmailServiceSettings.SmptServer">
            <summary>
            Gets or sets the SMPT server.
            </summary>
            <value>The SMPT server.</value>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.EmailServiceSettings.From">
            <summary>
            Gets or sets from.
            </summary>
            <value>From.</value>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.EmailServiceSettings.UsePort">
            <summary>
            Gets or sets a value indicating whether [use port].
            </summary>
            <value><c>true</c> if [use port]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.EmailServiceSettings.AuthenticationUserName">
            <summary>
            Gets or sets the name of the authentication user.
            </summary>
            <value>The name of the authentication user.</value>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.EmailServiceSettings.AuthenticationPassword">
            <summary>
            Gets or sets the authentication password.
            </summary>
            <value>The authentication password.</value>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.EmailServiceSettings.IsAuthenticationRequired">
            <summary>
            Gets or sets a value indicating whether this instance is authentication required.
            </summary>
            <value>
            	<c>true</c> if this instance is authentication required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.EmailServiceSettings.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:Starsoft.Core.EmailSupport.EmailHelper">
            <summary>
            Helper class for emails.
            </summary>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailHelper.GetSettings(System.Collections.IDictionary,System.String,Starsoft.Core.FuncCall{Starsoft.Core.EmailSupport.IEmailSettings})">
            <summary>
            Create the email service settings from the configuration source provided.
            </summary>
            <param name="config">The Configuration source.</param>
            <param name="emailServiceSectionName">The name of the section in the config source
            containing the email service settings.</param>
            <param name="settingsCreator">Lamda to option create the settings object.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.EmailHelper.GetOrDefault``1(System.Collections.IDictionary,System.String,System.String,``0)">
            <summary>
            Get the value from the dictionary using the section/keys specified, and if not available, return the defaultvalue supplied.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="config"></param>
            <param name="sectionName"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Encoders.HexTranslator">
            <summary>
            A hex translator.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Encoders.HexTranslator.GetEncodedBlockSize">
            <summary>
            Return encoded block size.
            </summary>
            <returns>2</returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.HexTranslator.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encode some data.
            </summary>
            <param name="input">Input data array.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="length">The amount of data to process.</param>
            <param name="outBytes">The output data array.</param>
            <param name="outOff">The offset within the output data array to start writing from.</param>
            <returns>Amount of data encoded.</returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.HexTranslator.GetDecodedBlockSize">
            <summary>
            Returns the decoded block size.
            </summary>
            <returns>1</returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.HexTranslator.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decode data from a byte array.
            </summary>
            <param name="input">The input data array.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="length">The amounty of data to process.</param>
            <param name="outBytes">The output data array.</param>
            <param name="outOff">The position within the output data array to start writing from.</param>
            <returns>The amount of data written.</returns>
        </member>
        <member name="T:Starsoft.Core.AttDictionary">
            <summary>
            表示键不区分大小写的键和值集合，用this[键]取指定键的值不存在时，不会抛出异常
            </summary>
        </member>
        <member name="M:Starsoft.Core.AttDictionary.#ctor">
            <summary>
            初始化一个实例对象
            </summary>
        </member>
        <member name="M:Starsoft.Core.AttDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            初始化一个实例对象
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Starsoft.Core.AttDictionary.#ctor(System.Object)">
            <summary>
            初始化一个实例对象
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Starsoft.Core.AttDictionary.N(System.String,System.Object)">
            <summary>
            将指定的键和值添加到字典中
            </summary>
            <param name="key">要添加的元素的键</param>
            <param name="value">要添加的元素的值。对于引用类型，该值可以为 null</param>
            <returns>返回对象本身</returns>
        </member>
        <member name="P:Starsoft.Core.AttDictionary.New">
            <summary>
            创建一个Starsoft.Core.AttDictionary对象实例
            </summary>
        </member>
        <member name="P:Starsoft.Core.AttDictionary.Item(System.String)">
            <summary>
            获取或设置指定键的值，当取指定键的值不存在时，不会抛出异常
            </summary>
            <param name="key">要设置值的键</param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Hz2Py">
            <summary>
            汉字转拼音
            </summary>
        </member>
        <member name="M:Starsoft.Core.Hz2Py.Convert(System.String)">
            <summary>
            把汉字转换成拼音(全拼)
            </summary>
            <param name="hzString">汉字字符串</param>
            <returns>转换后的拼音(全拼)字符串</returns>
        </member>
        <member name="T:Starsoft.Core.Notifications.NotificationDef">
            <summary>
            Define the location of notification content.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Notifications.NotificationDef.Name">
            <summary>
            Identifies a message template.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Notifications.NotificationDef.Location">
            <summary>
            Location of the template definition.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Notifications.NotificationDef.FileName">
            <summary>
            Just the file name from the full location.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Notifications.NotificationDef.IsAssemblyEmbedded">
            <summary>
            Flag indicates whether or not the template definition
            is embedded in an assembly.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Notifications.NotificationDef.AssemblyName">
            <summary>
            Name of the assembly if embedded.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Notifications.NotificationDef.IsXsl">
            <summary>
            Whether or not this is xsl based.
            TO_DO: NOT_USED currently.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Notifications.NotificationDef.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Notifcation content.
            </summary>
            <param name="name"></param>
            <param name="fulllocation"></param>
            <param name="fileName"></param>
            <param name="isAssemblyEmbedded"></param>
            <param name="assemblyName"></param>
            <param name="isXsl"></param>
        </member>
        <member name="M:Starsoft.Core.Notifications.INotificationDefinitions.Remove(System.String)">
            <summary>
            Remove entry associated with the key.
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:Starsoft.Core.Notifications.INotificationDefinitions.Keys">
            <summary>
            Get all the keys.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Notifications.INotificationDefinitions.Item(System.String)">
            <summary>
            Get / set the value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Logging.LogMulti">
            <summary>
            Logging class that will log to multiple loggers.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Logging.ILogMulti">
            <summary>
            Interface for a logger that represents a chain(multiple) loggers.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.ILogMulti.Append(Starsoft.Core.Logging.ILog)">
            <summary>
            Append another logger to the chain of loggers.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILogMulti.Replace(Starsoft.Core.Logging.ILog)">
            <summary>
            Replaces all the existing loggers w/ the supplied logger.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.ILogMulti.Clear">
            <summary>
            Clear all the chained loggers.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Logging.ILogMulti.Item(System.String)">
            <summary>
            Get a logger by it's name.
            </summary>
            <param name="loggerName"></param>
        </member>
        <member name="P:Starsoft.Core.Logging.ILogMulti.Item(System.Int32)">
            <summary>
            Get a logger by it's index position.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Starsoft.Core.Logging.ILogMulti.Count">
            <summary>
            Get the number of loggers that are in here.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogMulti.#ctor(System.String,Starsoft.Core.Logging.ILog)">
            <summary>
            Initalize multiple loggers.
            </summary>
            <param name="logger"></param>
            <param name="name"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogMulti.#ctor(System.String,System.Collections.Generic.IList{Starsoft.Core.Logging.ILog})">
            <summary>
            Initalize multiple loggers.
            </summary>
            <param name="name"></param>
            <param name="loggers"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogMulti.Init(System.String,System.Collections.Generic.IList{Starsoft.Core.Logging.ILog})">
            <summary>
            Initialize with loggers.
            </summary>
            <param name="name"></param>
            <param name="loggers"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogMulti.Log(Starsoft.Core.Logging.LogEvent)">
            <summary>
            Log the event to each of the loggers.
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogMulti.Append(Starsoft.Core.Logging.ILog)">
            <summary>
            Append to the chain of loggers.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogMulti.Replace(Starsoft.Core.Logging.ILog)">
            <summary>
            Replaces all the existing loggers w/ the supplied logger.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogMulti.Clear">
            <summary>
            Clear all the exiting loggers and only add the console logger.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogMulti.IsEnabled(Starsoft.Core.Logging.LogLevel)">
            <summary>
            Whether or not the level specified is enabled.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Logging.LogMulti.Flush">
            <summary>
            Flushes the buffers.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogMulti.ShutDown">
            <summary>
            Shutdown all loggers.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogMulti.ActivateOptions">
            <summary>
            Determine the lowest level by getting the lowest level
            of all the loggers.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Logging.LogMulti.Count">
            <summary>
            Get the number of loggers that are part of this loggerMulti.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Logging.LogMulti.Item(System.String)">
            <summary>
            Get a logger by it's name.
            </summary>
            <param name="loggerName"></param>
        </member>
        <member name="P:Starsoft.Core.Logging.LogMulti.Item(System.Int32)">
            <summary>
            Get a logger by it's name.
            </summary>
            <param name="logIndex"></param>
        </member>
        <member name="P:Starsoft.Core.Logging.LogMulti.Level">
            <summary>
            Get the level. ( This is the lowest level of all the loggers. ).
            </summary>
        </member>
        <member name="T:Starsoft.Core.RegexPatterns">
            <summary>
            This class contains several common regular expressions.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.Alpha">
            <summary>
            Alphabetic regex.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.AlphaUpperCase">
            <summary>
            Uppercase Alphabetic regex.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.AlphaLowerCase">
            <summary>
            Lowercase Alphabetic regex.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.AlphaNumeric">
            <summary>
            Alphanumeric regex.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.AlphaNumericSpace">
            <summary>
            Alphanumeric and space regex.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.AlphaNumericSpaceDash">
            <summary>
            Alphanumeric and space and dash regex.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.AlphaNumericSpaceDashUnderscore">
            <summary>
            Alphanumeric plus space, dash and underscore regex.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.AlphaNumericSpaceDashUnderscorePeriod">
            <summary>
            Alphaumieric plus space, dash, period and underscore regex.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.Numeric">
            <summary>
            Numeric regex.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.SocialSecurity">
            <summary>
            Ssn regex.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.Email">
            <summary>
            E-mail regex.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.Url">
            <summary>
            Url regex.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.ZipCodeUS">
            <summary>
            US zip code regex.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.ZipCodeUSWithFour">
            <summary>
            US zip code with four digits regex.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.ZipCodeUSWithFourOptional">
            <summary>
            US zip code with optional four digits regex.
            </summary>
        </member>
        <member name="F:Starsoft.Core.RegexPatterns.PhoneUS">
            <summary>
            US phone regex.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Queue.QueueProcessState">
            <summary>
            State of the Queue Processor
            </summary>
        </member>
        <member name="F:Starsoft.Core.Queue.QueueProcessState.Idle">
            <summary>
            Queue processor is idle.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Queue.QueueProcessState.Busy">
            <summary>
            Queue processor is busy.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Queue.QueueProcessState.Stopped">
            <summary>
            Queue processor is stopped.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Parsing.LexArgs">
            <summary>
            Lexical parser used to parsing text.
            e.g. Such as parsing arguments to a program.
            </summary>
            <example>
                IDictionary&lt;string, string&gt; args1 = LexArgs.Parse("-trace=4 -config=PROD -appid=Knowledgedrink");
                IDictionary&lt;string, string&gt; args2 = LexArgs.Parse(" backup \"comment's\" 'blogs'");
                IDictionary&lt;string, string&gt; args2 = LexArgs.Parse("appid=KnowledgeDrink --trace=4 --config=\"prod.config\"   BLOGS 'c: d: e:'");
            </example>
        </member>
        <member name="F:Starsoft.Core.Parsing.LexArgs._defaultSettings">
            <summary>
            Default settings
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexArgs.Parse(System.String)">
            <summary>
            Parse supplied text using default settings.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexArgs.ParseList(System.String)">
            <summary>
            Parse supplied text using default settings.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexArgs.Parse(System.String,Starsoft.Core.Parsing.LexSettings)">
            <summary>
            Parse supplied text using supplied settings.
            </summary>
            <param name="line"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexArgs.#ctor">
            <summary>
            Create using default settings.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Parsing.LexArgs.#ctor(Starsoft.Core.Parsing.LexSettings)">
            <summary>
            Create with supplied settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:Starsoft.Core.Encoders.UrlBase64Helper">
            <summary> 
            有关Url base64编码算法的相关操作 
            </summary> 
        </member>
        <member name="M:Starsoft.Core.Encoders.UrlBase64Helper.UrlEncoding(System.String)">
            <summary>
            将字符串使用base64算法编码，默认采用UTF8编码
            </summary>
            <param name="sourceString">待编码的字符串</param>
            <returns>加码后的文本字符串</returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.UrlBase64Helper.UrlEncoding(System.String,System.Text.Encoding)">
            <summary>
            将字符串使用base64算法编码
            </summary>
            <param name="sourceString">待编码的字符串</param>
            <param name="ens"></param>
            <returns>加码后的文本字符串</returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.UrlBase64Helper.UrlDecoding(System.String)">
            <summary>
            从base64编码的字符串中还原字符串
            </summary>
            <param name="base64String">待解码的字符串</param>
            <returns>解码后的文本字符串</returns>
        </member>
        <member name="M:Starsoft.Core.Encoders.UrlBase64Helper.UrlDecoding(System.String,System.Text.Encoding)">
            <summary>
            从base64编码的字符串中还原字符串
            </summary>
            <param name="base64String">待解码的字符串</param>
            <param name="ens"></param>
            <returns>解码后的文本字符串</returns>
        </member>
        <member name="T:Starsoft.Core.Notifications.NotificationServiceBase">
            <summary>
            Base class for notifications.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Notifications.NotificationServiceBase._queue">
            <summary>
            The queue the stores the notification messages.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Notifications.NotificationServiceBase._settings">
            <summary>
            The notification settings.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Notifications.NotificationServiceBase.#ctor(Starsoft.Core.Queue.QueueProcessor{Starsoft.Core.EmailSupport.NotificationMessage},Starsoft.Core.Notifications.NotificationSettings)">
            <summary>
            Initialize.
            </summary>
            <param name="queue"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Starsoft.Core.Notifications.NotificationServiceBase.Notify(Starsoft.Core.EmailSupport.NotificationMessage)">
            <summary>
            Queue the notification.
            Don't just send it directly.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationServiceBase.Settings">
            <summary>
            Notification settings.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Notifications.NotificationServiceBase.Queue">
            <summary>
            The notification queue.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Logging.LogHelper">
            <summary>
            Helper class for logging.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogHelper.LogToConsole``1(Starsoft.Core.Logging.LogLevel,System.String,System.Exception,System.Object[])">
            <summary>
            Logs to the console.
            </summary>
            <typeparam name="T">The datatype of the caller that is logging the event.</typeparam>
            <param name="level">The log level</param>
            <param name="message">Message to log</param>
            <param name="ex">Exception to log</param>
            <param name="args">Additional arguments.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogHelper.BuildLogEvent(System.Type,Starsoft.Core.Logging.LogLevel,System.Object,System.Exception,System.Object[])">
            <summary>
            Construct the logevent using the values supplied.
            Fills in other data values in the log event.
            </summary>
            <param name="logType">The type the logger is associated with.</param>
            <param name="level">The log level</param>
            <param name="message">Message to log</param>
            <param name="ex">Exception to log</param>
            <param name="args">Additional args.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogHelper.GetLogLevel(System.String)">
            <summary>
            Build the log file name.
            </summary>
            <param name="loglevel">Log level : "critical | error | warning | info | debug"
            Name of logfile containing substituions. </param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Logging.LogHelper.BuildLogFileName(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Build the log file name.
            </summary>
            <param name="appName">E.g. "StockMarketApplication".</param>
            <param name="date">E.g. Date to put in the name.</param>
            <param name="env">Environment name. E.g. "DEV", "PROD".</param>
            <param name="logFileName">E.g. "%name%-%yyyy%-%MM%-%dd%-%env%-%user%.log".
            Name of logfile containing substituions. </param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Logging.LogFormatter">
            <summary>
            Log formatter.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogFormatter.Format(System.String,Starsoft.Core.Logging.LogEvent)">
            <summary>
            Quick formatter that toggles between delimited and xml.
            </summary>
            <param name="formatter"></param>
            <param name="logEvent"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogFormatter.Format(Starsoft.Core.Logging.LogEvent)">
            <summary>
            Builds the log message using message and arguments.
            </summary>
            <param name="logEvent">The log event object.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Logging.LogFormatter.FormatXml(Starsoft.Core.Logging.LogEvent)">
            <summary>
            Builds the log message using message and arguments.
            </summary>
            <param name="logEvent">The log event object</param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Logging.LogFile">
            <summary>
            File based logger.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogFile.#ctor(System.String,System.String)">
            <summary>
            Initialize with path of the log file.
            </summary>
            <param name="name"></param>
            <param name="filepath"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogFile.#ctor(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Initialize log file.
            </summary>
            <param name="name">Name of application.</param>
            <param name="filepath">File path, can contain substitutions. e.g. "%yyyy%.</param>
            <param name="date">Date to use in the name of the log file.</param>
            <param name="env">Environment name to put into the name of the log file.</param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogFile.#ctor(System.String,System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
            <summary>
            Initialize log file.
            </summary>
            <param name="name">Name of application.</param>
            <param name="filepath">File path, can contain substitutions. e.g. "%yyyy%.</param>
            <param name="date">Date to use in the name of the log file.</param>
            <param name="env">Environment name to put into the name of the log file.</param>
            <param name="rollFile"></param>
            <param name="maxSizeInMegs"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogFile.Log(Starsoft.Core.Logging.LogEvent)">
            <summary>
            Log the event to file.
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="M:Starsoft.Core.Logging.LogFile.Flush">
            <summary>
            Flush the output.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogFile.ShutDown">
            <summary>
            Shutsdown the logger.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogFile.Dispose">
            <summary>
            Flushes the data to the file.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogFile.Finalize">
            <summary>
            Destructor to close the writer
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogFile.FlushCheck">
            <summary>
            Flush the data and check file size for rolling.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Logging.LogFile.FilePath">
            <summary>
            The full path to the log file.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Cryptography.DES.TripleDES">
            <summary>
            This class implements Triple DES encrypt and decrypt methods
            that operate on hexadecimal data and keys. Data to be encrypted
            or decrypted should be exactly 16 hexadecimal characters.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Cryptography.DES.TripleDES.Encrypt(Starsoft.Core.Cryptography.DES.DESKey,System.String)">
            <summary>
            Encrypts hexadecimal data using a DES key.
            </summary>
            <param name="key">DES key to use with the encrypt operation.</param>
            <param name="data">Hexadecimal data to encrypt.</param>
            <returns>Encrypted hexadecimal data.</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.DES.TripleDES.Decrypt(Starsoft.Core.Cryptography.DES.DESKey,System.String)">
            <summary>
            Decrypts hexadecimal data using a DES key.
            </summary>
            <param name="key">DES key to use with the decrypt operation.</param>
            <param name="data">Hexadecimal data to decrypt.</param>
            <returns>Decrypted hexadecimal data.</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.DES.TripleDES.DESEncrypt(Starsoft.Core.Cryptography.DES.DESKey,System.String)">
            <summary>
            Encrypts hexadecimal data using a single-length DES key.
            </summary>
            <param name="key">DES key to use with the encrypt operation.</param>
            <param name="data">Hexadecimal data to encrypt.</param>
            <returns>Encrypted hexadecimal data.</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.DES.TripleDES.DESDecrypt(Starsoft.Core.Cryptography.DES.DESKey,System.String)">
            <summary>
            Decrypts hexadecimal data using a single-length DES key.
            </summary>
            <param name="key">DES key to use with the decrypt operation.</param>
            <param name="data">Hexadecimal data to decrypt.</param>
            <returns>Decrypted hexadecimal data.</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.DES.TripleDES.DESEncrypt(System.Byte[],System.Byte[])">
            <summary>
            Encrypts 8 bytes of data with an 8-byte key, ECB mode, no padding, no IV.
            </summary>
            <param name="key">8-byte DES key to use in the encrypt operation.</param>
            <param name="data">8-byte data to encrypt.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.DES.TripleDES.DESDecrypt(System.Byte[],System.Byte[])">
            <summary>
            Decrypts 8 bytes of data with an 8-byte key, ECB mode, no padding, no IV.
            </summary>
            <param name="key">8-byte DES key to use in the decrypt operation.</param>
            <param name="data">8-byte data to decrypt.</param>
            <returns>Decrypted data.</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.DES.TripleDES.DESOperation(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Encrypts or decrypts 8 bytes of data using an 8-byte key, ECB mode, no padding, no IV.
            </summary>
            <param name="key">8-byte DES key to use with the operation.</param>
            <param name="data">8-byte data to use with the operation.</param>
            <param name="encrypt">True to encrypt, false to decrypt.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="T:Starsoft.Core.Configuration.ConfigSourceMulti">
            <summary>
            Config source multi - list of multiple config sources.
            Need to hit make this thread safe.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSourceMulti.#ctor(System.Collections.Generic.IList{Starsoft.Core.Configuration.IConfigSource})">
            <summary>
            Config source list.
            </summary>
            <param name="sources"></param>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSourceMulti.configSource_OnConfigSourceChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for on config source changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSourceMulti.Init">
            <summary>
            Initialization after construction.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSourceMulti.Load">
            <summary>
            Load settings.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSourceMulti.Save">
            <summary>
            Save the sources.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSourceMulti.Merge">
            <summary>
            Merge all the config sources.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.ConfigSourceMulti.Merge(Starsoft.Core.Configuration.IConfigSection,Starsoft.Core.Configuration.IConfigSection)">
            <summary>
            Merge with config source specified.
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
        </member>
        <member name="E:Starsoft.Core.Configuration.ConfigSourceMulti.OnConfigSourceChanged">
            <summary>
            Notifies subscribers when any configsource was changed.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Configuration.ConfigSourceMulti.SourcePath">
            <summary>
            Get the source paths.
            e.g. c:\app\prod.config,c:\app\dev.config
            </summary>
        </member>
        <member name="P:Starsoft.Core.Configuration.ConfigSourceMulti.Name">
            <summary>
            Get the full name of this source.
            e.g. prod.config,qa.config,dev.config.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Logging.LogConsole">
            <summary>
            This is the default extremely simple ( Console ) logger for the static class Logger.
            This means that the Logger does NOT have to be initialized with a provider.
            You can just use it immediately.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogConsole.#ctor">
            <summary>
            Default constructor. Not associated with any class/type.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogConsole.#ctor(System.String)">
            <summary>
            Constructor with name.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogConsole.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor with name.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Logging.LogConsole.Log(Starsoft.Core.Logging.LogEvent)">
            <summary>
            This is the only method REQUIRED to be implemented.
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="T:Starsoft.Core.IO.IniDocument">
            <summary>
            IniDocument to handle loading and writing(not yet done)
            of ini files.
            
            This class can load a MULTI-LINE ini file into a dictionary like data structure.
            
            [BlogPost1]
            Title : Introduction to Oil painting class.
            Description : "Learn how to paint using
            oil, in this beginners class for painting enthusiats."
            Url : http://www.knowledgedrink.com
            </summary>
        </member>
        <member name="M:Starsoft.Core.IO.IniDocument.#ctor">
            <summary>
            Default initialization.
            </summary>
        </member>
        <member name="M:Starsoft.Core.IO.IniDocument.#ctor(System.Collections.Generic.IList{Starsoft.Core.Configuration.ConfigSection})">
            <summary>
            Initialize using IniSections.
            </summary>
            <param name="sections"></param>
        </member>
        <member name="M:Starsoft.Core.IO.IniDocument.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize using IniSections.
            </summary>
            <param name="iniContentOrFilePath"></param>
            <param name="isFilePath"></param>
        </member>
        <member name="M:Starsoft.Core.IO.IniDocument.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initialize using IniSections.
            </summary>
            <param name="name"></param>
            <param name="iniContentOrFilePath"></param>
            <param name="isFilePath"></param>
        </member>
        <member name="M:Starsoft.Core.IO.IniDocument.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize the ini document with the string or file path.
            </summary>
            <param name="iniContentOrFilePath"></param>
            <param name="isFilePath"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:Starsoft.Core.IO.IniDocument.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize the ini document with the string or file path.
            </summary>
            <param name="name"></param>
            <param name="iniContentOrFilePath"></param>
            <param name="isFilePath"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:Starsoft.Core.IO.IniDocument.Init(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize.
            </summary>
            <param name="name"></param>
            <param name="iniContentOrFilePath"></param>
            <param name="isFilePath"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:Starsoft.Core.IO.IniDocument.Load">
            <summary>
            Load settings.
            </summary>
        </member>
        <member name="M:Starsoft.Core.IO.IniDocument.Save">
            <summary>
            Save the document to file.
            </summary>
        </member>
        <member name="M:Starsoft.Core.IO.IniDocument.Save(System.String)">
            <summary>
            Save the document to the filepath specified.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="P:Starsoft.Core.IO.IniDocument.SourcePath">
            <summary>
            Source path of this file.
            </summary>
        </member>
        <member name="T:Starsoft.Core.IO.IniSection">
            <summary>
            Class to represent an IniSection/Group and which also stores the entries
            associated under the section/group.
            e.g. 
            [group1]
            key1 = value1
            key2 = value2
            </summary>
        </member>
        <member name="M:Starsoft.Core.IO.IniSection.Clone">
            <summary>
            Create shallow copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.IO.IniSection.ToString">
            <summary>
            Return the ini format of the contents.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.IO.IniLineType">
            <summary>
            The type of the ini line type.
            </summary>
        </member>
        <member name="T:Starsoft.Core.IO.IniParserConstants">
            <summary>
            Parser constants.
            </summary>
        </member>
        <member name="T:Starsoft.Core.IO.IniParserSettings">
            <summary>
            Settings for the parser.
            </summary>
        </member>
        <member name="F:Starsoft.Core.IO.IniParserSettings.MaxLenghtOfComment">
            <summary>
            The maximum length of a comment.
            </summary>
        </member>
        <member name="F:Starsoft.Core.IO.IniParserSettings.MaxLengthOfGroup">
            <summary>
            The maximum length of a group name [group]
            </summary>
        </member>
        <member name="F:Starsoft.Core.IO.IniParserSettings.MaxLengthOfKey">
            <summary>
            The maximum length of a key key:.
            </summary>
        </member>
        <member name="F:Starsoft.Core.IO.IniParserSettings.MaxLenghtOfValueSingleLine">
            <summary>
            The maximum length of a value in a single line.
            </summary>
        </member>
        <member name="F:Starsoft.Core.IO.IniParserSettings.IsCaseSensitive">
            <summary>
            Whether or not the groups/keys are case-sensitive
            </summary>
        </member>
        <member name="T:Starsoft.Core.IO.IIniParser">
            <summary>
            Interface for an IniParser, This is a parser that supports
            parsing multiple lines for the values.
            e.g. 
            
            [post1]
            title: My first post
            description: " This is a ini parser that can handle
            parsing multiples lines for the value. "
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.IO.IIniParser.Parse(System.String)">
            <summary>
            Parse the ini content.
            </summary>
            <param name="iniContent"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.IO.IIniParser.Settings">
            <summary>
            Settings for the parser.
            </summary>
        </member>
        <member name="P:Starsoft.Core.IO.IIniParser.Errors">
            <summary>
            List of errors
            </summary>
        </member>
        <member name="T:Starsoft.Core.IO.IniParser">
            <summary>
            Parser.
            Terms:
            1. Char - a single char whether it's space, doublequote, singlequote, etc.
            2. Token - a collection of chars that make up a valid word/word-boundary.
                e.g.
                1. abc, 
                2. -format:csv
                3. -file:"c:/my files/file1.txt"
                4. loc:'c:/my files/file1.txt'
                5. -format:csv
            </summary>
        </member>
        <member name="M:Starsoft.Core.IO.IniParser.#ctor">
            <summary>
            Create new instance with default settings
            </summary>
        </member>
        <member name="M:Starsoft.Core.IO.IniParser.Parse(System.String)">
            <summary>
            Parse the text and convert into list of params.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.IO.IniParser.Init(System.String)">
            <summary>
            Initialize the reader and the stack.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Starsoft.Core.IO.IniParser.StoreGroup">
            <summary>
            Store the current group
            </summary>
        </member>
        <member name="M:Starsoft.Core.IO.IniParser.StoreKeyValue">
            <summary>
            Store the current key value.
            </summary>
        </member>
        <member name="M:Starsoft.Core.IO.IniParser.ValidateText">
            <summary>
            Confirm that the input text is valid text
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.IO.IniParser.Settings">
            <summary>
            The settings for the parser.
            </summary>
        </member>
        <member name="P:Starsoft.Core.IO.IniParser.Errors">
            <summary>
            List of errors.
            </summary>
        </member>
        <member name="T:Starsoft.Core.EmailSupport.NotificationMessage">
            <summary>
            Notification message.
            </summary>
        </member>
        <member name="F:Starsoft.Core.EmailSupport.NotificationMessage.To">
            <summary>
            Who the message is to
            </summary>
        </member>
        <member name="F:Starsoft.Core.EmailSupport.NotificationMessage.From">
            <summary>
            Who the message is from.
            </summary>
        </member>
        <member name="F:Starsoft.Core.EmailSupport.NotificationMessage.Subject">
            <summary>
            Subject of the message
            </summary>
        </member>
        <member name="F:Starsoft.Core.EmailSupport.NotificationMessage.Body">
            <summary>
            Body of the message
            </summary>
        </member>
        <member name="F:Starsoft.Core.EmailSupport.NotificationMessage.MessageTemplateId">
            <summary>
            Template id to link the message to the template for the message
            </summary>
        </member>
        <member name="F:Starsoft.Core.EmailSupport.NotificationMessage.IsHtml">
            <summary>
            Whether or not this message body contains html.
            </summary>
        </member>
        <member name="F:Starsoft.Core.EmailSupport.NotificationMessage.Values">
            <summary>
            String of values to supply to the message.
            </summary>
        </member>
        <member name="M:Starsoft.Core.EmailSupport.NotificationMessage.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.String,System.String)">
            <summary>
            Initialize.
            </summary>
            <param name="values"></param>
            <param name="to"></param>
            <param name="from"></param>
            <param name="subject"></param>
            <param name="messageTemplateId"></param>
        </member>
        <member name="T:Starsoft.Core.EmailSupport.EmailMessage">
            <summary>
            Basic email message.
            </summary>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.EmailMessage.From">
            <summary>
            From email address.
            </summary>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.EmailMessage.To">
            <summary>
            To email address.
            </summary>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.EmailMessage.Subject">
            <summary>
            Subject of email.
            </summary>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.EmailMessage.Body">
            <summary>
            Body of email.
            </summary>
        </member>
        <member name="P:Starsoft.Core.EmailSupport.EmailMessage.IsHtml">
            <summary>
            Whether or not the body message contains html.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Queue.Queues">
            <summary>
            This class serves as a controller for queues processors.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Queue.Queues._queues">
            <summary>
            Named queues.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.AddProcessorFor``1(System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <typeparam name="T">Type of items to put in queue.</typeparam>
            <param name="handler">Action to be called on item dequeue.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.AddProcessorFor``1(System.Int32,System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Add a new named queue processor.
            </summary>
            <typeparam name="T">Type of items to put in queue.</typeparam>
            <param name="itemsToDequeuePerProcess">Number of items to dequeue on dequeue operation.</param>
            <param name="handler">Action to be called on item dequeue.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.AddProcessorFor``1(System.String,System.Action{System.Collections.Generic.IList{``0}})">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <typeparam name="T">Type of items to put in queue.</typeparam>
            <param name="namedHandler">Queue processor name.</param>
            <param name="handler">Action to be called on item dequeue.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.AddProcessorFor``1(System.String,System.Action{System.Collections.Generic.IList{``0}},System.Int32)">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <typeparam name="T">Type of items to put in queue.</typeparam>
            <param name="namedHandler">Queue processor name.</param>
            <param name="handler">Action to be called on item dequeue.</param>
            <param name="itemsToDequeue">Number of items to dequeue on dequeue operation.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.AddProcessor``1(Starsoft.Core.Queue.IQueueProcessor)">
            <summary>
            Add a new named queue processor.
            </summary>
            <typeparam name="T">Type of items to put in queue.</typeparam>
            <param name="processor">Instance of queue processor.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.AddProcessor(System.String,Starsoft.Core.Queue.IQueueProcessor)">
            <summary>
            Add a new named queue processor w/ the specified name.
            </summary>
            <param name="name">Name of queue processor.</param>
            <param name="processor">Instance of queue processor.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.ContainsProcessorFor``1">
            <summary>
            Whether or not there is a named handler for the specified type.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <returns>True if a queue processor exists for this type.</returns>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.Enqueue``1(``0)">
            <summary>
            Enqueue the item.
            </summary>
            <typeparam name="T">Type of item to enqueue.</typeparam>
            <param name="item">Item to enqueue.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.Enqueue``1(System.String,``0)">
            <summary>
            Enqueue the item.
            </summary>
            <typeparam name="T">Type of item to enqueue.</typeparam>
            <param name="namedProcesser">Name of queue processor to use.</param>
            <param name="item">Item to enqueue.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.Enqueue``1(System.Collections.Generic.IList{``0})">
            <summary>
            Enqueue the list of items.
            </summary>
            <typeparam name="T">Type of items to enqueue.</typeparam>
            <param name="items">List with items to enqueue.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.Enqueue``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            Enqueue the list of items.
            </summary>
            <typeparam name="T">Type of items to enqueue.</typeparam>
            <param name="namedProcesser">Name of queue processor to use.</param>
            <param name="items">List of items to enqueue.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.Process``1">
            <summary>
            Process the queue handler for the specified type.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.Process(System.String)">
            <summary>
            Process the queue handler associated w/ the specified name.
            </summary>
            <param name="namedProcesser">Name of queue processor.</param>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.IsBusy``1">
            <summary>
            Whether or not the queue hanlder for the specified type is busy.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <returns>True if the appointed queue processor is busy.</returns>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.IsBusy(System.String)">
            <summary>
            Whether or not the queue hanlder for the specified type is busy.
            </summary>
            <param name="namedProcesser">Name of queue processor.</param>
            <returns>True if the queue processor is busy.</returns>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.IsIdle``1">
            <summary>
            Whether or not the queue hanlder for the specified type is IsIdle.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <returns>True if the appointed queue processor is idle.</returns>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.IsIdle(System.String)">
            <summary>
            Whether or not the queue hanlder for the specified type is IsIdle.
            </summary>
            <param name="namedProcesser">Name of queue processor.</param>
            <returns>True if the queue processor is busy.</returns>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.GetQueue``1">
            <summary>
            Get the queue processor for the specified type.
            </summary>
            <typeparam name="T">Type of item.</typeparam>
            <returns>Appointed queue processor.</returns>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.GetMetaInfo">
            <summary>
            Get the metainfo for all the queues.
            </summary>
            <returns>List with status for all queue processors.</returns>
        </member>
        <member name="M:Starsoft.Core.Queue.Queues.GetQueue(System.String)">
            <summary>
            Get queue processor w/ the specified name.
            </summary>
            <param name="namedProcesser">Name of queue processor.</param>
            <returns>Queue processor with specified name.</returns>
        </member>
        <member name="T:Starsoft.Core.Queue.QueueStatus">
            <summary>
            This class can hold the status of a queue processor.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Queue.QueueStatus.Name">
            <summary>
            The name of the queue.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Queue.QueueStatus.State">
            <summary>
            The current state of the queue.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Queue.QueueStatus.Count">
            <summary>
            Number of items still in the queue.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Queue.QueueStatus.LastProcessDate">
            <summary>
            The last time the queue was processed.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Queue.QueueStatus.DequeueSize">
            <summary>
            How many items are dequeued from this queue each time.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Queue.QueueStatus.NumberOfTimesProcessed">
            <summary>
            Number of times the queue has been processed.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Queue.QueueStatus.ElapsedTimeSinceLastProcessDate">
            <summary>
            Amount of time since the last process date.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Queue.QueueStatus.TotalProcessed">
            <summary>
            Total number of times that have been processed.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Queue.QueueStatus.#ctor(Starsoft.Core.Queue.QueueProcessState,System.Int32,System.DateTime,System.Int32,System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Starsoft.Core.Queue.QueueStatus"/> class.
            </summary>
            <param name="state">The state.</param>
            <param name="countItemsRemaining">The count.</param>
            <param name="lastProcessDate">The last process date.</param>
            <param name="numberOfTimesProcessed">Number of times items were processed.</param>
            <param name="elaspedTime">Time elapsed since the last item was processed.</param>
            <param name="totalProcessed">Total number of items processed.</param>
            <param name="dequeueSize">Size of the dequeue.</param>
        </member>
        <member name="T:Starsoft.Core.Queue.QueueProcessorSettings">
            <summary>
            Settings for the processing queue.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Queue.QueueProcessorSettings.NumberToProcessPerDequeue">
            <summary>
            Gets or sets the number to process per dequeue.
            </summary>
            <value>The number to process per dequeue.</value>
        </member>
        <member name="T:Starsoft.Core.Cryptography.CryptoSym">
            <summary>
            Cryptography service to encrypt and decrypt strings.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Cryptography.CryptoSym._encryptionOptions">
            <summary>
            Configuration settings for encryption/decryptiong.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Cryptography.CryptoSym._algorithm">
            <summary>
            The underlying symmetric algorithm to use.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoSym.#ctor">
            <summary>
            Default options
            </summary>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoSym.#ctor(System.String)">
            <summary>
            Initialize with the encryptionKey
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoSym.#ctor(System.String,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:Starsoft.Core.Cryptography.CryptoSym"/> class.
            </summary>
            <param name="key">The encryption key to use.</param>
            <param name="algorithm">The crypto algorithm to use</param>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoSym.#ctor(Starsoft.Core.Cryptography.CryptoConfig,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:Starsoft.Core.Cryptography.CryptoSym"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="algorithm">The crypto algorithm to use</param>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoSym.SetAlgorithm(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Set the creator for the algorithm.
            </summary>
            <param name="algorithm"></param>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoSym.Encrypt(System.String)">
            <summary>
            Encrypts the plaintext using an internal private key.
            </summary>
            <param name="plaintext">The text to encrypt.</param>
            <returns>An encrypted string in base64 format.</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoSym.Decrypt(System.String)">
            <summary>
            Decrypts the base64key using an internal private key.
            </summary>
            <param name="base64Text">The encrypted string in base64 format.</param>
            <returns>The plaintext string.</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoSym.IsMatch(System.String,System.String)">
            <summary>
            Determine if encrypted text can be matched to unencrypted text.
            </summary>
            <param name="encrypted"></param>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Cryptography.CryptoSym.Settings">
            <summary>
            Options for encryption.
            </summary>
            <value></value>
        </member>
        <member name="T:Starsoft.Core.ImageInfo">
            <summary>
            图像信息
            </summary>
        </member>
        <member name="F:Starsoft.Core.ImageInfo.FORMAT_JPEG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.ImageInfo.FORMAT_GIF">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.ImageInfo.FORMAT_PNG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.ImageInfo.FORMAT_BMP">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.ImageInfo.COLOR_TYPE_UNKNOWN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.ImageInfo.COLOR_TYPE_TRUECOLOR_RGB">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.ImageInfo.COLOR_TYPE_PALETTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.ImageInfo.COLOR_TYPE_GRAYSCALE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starsoft.Core.ImageInfo.COLOR_TYPE_BLACK_AND_WHITE">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.ImageInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.ImageInfo.#ctor(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Starsoft.Core.ImageInfo.Check">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.ImageInfo.Stream">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.ImageInfo.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.ImageInfo.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.ImageInfo.BitsPerPixel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.ImageInfo.Progressive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.ImageInfo.Format">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.ImageInfo.ColorType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.ImageInfo.CollectComments">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.ImageInfo.Comments">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.ImageInfo.DetermineNumberOfImages">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.ImageInfo.NumberOfImages">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.ImageInfo.PhysicalHeightDpi">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.ImageInfo.PhysicalWidthDpi">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.ImageInfo.FormatName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Starsoft.Core.ImageInfo.MimeType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starsoft.Core.BootStrapSupport.IAppContext">
            <summary>
            Simple interface to facilitate storage of data
            to be passed between tasks.
            </summary>
        </member>
        <member name="P:Starsoft.Core.BootStrapSupport.IAppContext.Bag">
            <summary>
            Get/set the data bag stored in this instance.
            </summary>
        </member>
        <member name="T:Starsoft.Core.BootStrapSupport.AppContext">
            <summary>
            Simple wrapper for passing context data between tasks.
            </summary>
        </member>
        <member name="M:Starsoft.Core.BootStrapSupport.AppContext.#ctor">
            <summary>
            Default class constructor.
            </summary>
        </member>
        <member name="P:Starsoft.Core.BootStrapSupport.AppContext.Bag">
            <summary>
            Get/set the data bag stored in this instance.
            </summary>
        </member>
        <member name="T:Starsoft.Core.Collections.DictionaryBidirectional`2">
            <summary>
            Dictionary for bidirectional lookup.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.#ctor">
            <summary>
            Create new instance with empty bi-directional lookups.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IDictionary{`1,`0})">
            <summary>
            Initialize using existing forward and reverse lookups.
            </summary>
            <param name="forward"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.Add(`0,`1)">
            <summary>
            Add to key/value for both forward and reverse lookup.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.ContainsKey(`0)">
            <summary>
            Determine if the key is contain in the forward lookup.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.Remove(`0)">
            <summary>
            Remove the key for both forward and reverse lookup.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get the value from the forward lookup.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add to bi-directional lookup.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.Clear">
            <summary>
            Clears keys/value for bi-directional lookup.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determine if the item is in the forward lookup.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the array of key/value pairs for both bi-directionaly lookups.
            TO_DO: This needs to be unit-tested since, I don't think I'm handling
            the _reverseMap correctly.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove the item from bi-directional lookup.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.GetEnumerator">
            <summary>
            Get the enumerator for the forward lookup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for the forward lookup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.ContainsValue(`1)">
            <summary>
            Determine whether or not the reverse lookup contains the key
            represented by the value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.ContainsReverseLookup(`1)">
            <summary>
            Determine whether or the reverse lookup ( value ) exists.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryBidirectional`2.KeyFor(`1)">
            <summary>
            Determine whether or the reverse lookup ( value ) exists.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryBidirectional`2.Keys">
            <summary>
            Get a list of all the keys in the forward lookup.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryBidirectional`2.Values">
            <summary>
            Get the collection of values.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryBidirectional`2.Item(`0)">
            <summary>
            Set the key / value for bi-directional lookup.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryBidirectional`2.Count">
            <summary>
            Get number of entries.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryBidirectional`2.IsReadOnly">
            <summary>
            Get whether or not this is read-only.
            </summary>
        </member>
        <member name="T:Starsoft.Core.TelAnalysis">
            <summary>
            电话号码解析类
            </summary>
        </member>
        <member name="M:Starsoft.Core.TelAnalysis.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starsoft.Core.TelAnalysis.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="areaCode"></param>
            <param name="telCode"></param>
        </member>
        <member name="M:Starsoft.Core.TelAnalysis.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="countryCode"></param>
            <param name="areaCode"></param>
            <param name="telCode"></param>
        </member>
        <member name="M:Starsoft.Core.TelAnalysis.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="countryCode"></param>
            <param name="areaCode"></param>
            <param name="telCode"></param>
            <param name="extCode"></param>
        </member>
        <member name="M:Starsoft.Core.TelAnalysis.Encoder">
            <summary>
            编码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.TelAnalysis.ConvertToChar(System.Int32)">
            <summary>
            将数字转化为字符
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.TelAnalysis.ConvertToInt(System.Char)">
            <summary>
            将字符转换为整数
            </summary>
            <param name="prefixChar"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.TelAnalysis.Decoder(System.String)">
            <summary>
            解码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.TelAnalysis.ToString(System.Boolean)">
            <summary>
            是否转换为标准电话格式形式
            </summary>
            <param name="telFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.TelAnalysis.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.TelAnalysis.CountryCode">
            <summary>
            国家区号
            </summary>
        </member>
        <member name="P:Starsoft.Core.TelAnalysis.AreaCode">
            <summary>
            地区区号
            </summary>
        </member>
        <member name="P:Starsoft.Core.TelAnalysis.TelCode">
            <summary>
            电话号码
            </summary>
        </member>
        <member name="P:Starsoft.Core.TelAnalysis.ExtCode">
            <summary>
            分机号码
            </summary>
        </member>
        <member name="T:Starsoft.Core.MediaSupport.ImageHelper">
            <summary>
            Helper class for graphics processing.
            </summary>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.ImageHelper.ConvertToImage(System.Byte[])">
            <summary>
            Convert byte arry to an image object.
            </summary>
            <param name="content">The bytes representing the image.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.ImageHelper.ConvertToBytes(System.Drawing.Image)">
            <summary>
            Converts an image to a byte array.
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.ImageHelper.ConvertToBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts an image to a byte array.
            </summary>
            <param name="image"></param>
            <param name="format">The format of the image.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.ImageHelper.ConvertToThumbNail(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert the image contents as a byte[] into a thumbnail represented by another byte[].
            </summary>
            <param name="imageContents">The byte[] for the original contents.</param>
            <param name="thumbNailHeigth">Height for thumbnail</param>
            <param name="thumbNailWidth">Width for thumbnail</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.ImageHelper.GetDimensions(System.Byte[])">
            <summary>
            Returns the height and width of the image.
            </summary>
            <param name="imageContents"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.ImageHelper.SaveImageFile(System.Drawing.Image,System.String,System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate a new image from the bitmap with the specified format, width, and height, and at the specified location.
            </summary>
            <param name="sourceBmp">The bitmap containing an image from which to generate a new image with the
            specified settings. This bitmap is not modified.</param>
            <param name="newFilePath">The location on disk to store the image that is generated.</param>
            <param name="newImageFormat">The new image format.</param>
            <param name="newWidth">The width to make the new image.</param>
            <param name="newHeight">The height to make the new image.</param>
            <param name="newJpegQuality">The JPEG quality setting (0 - 100) for the new image. Only used if the
            image format paramater is JPEG; ignored for all other formats.</param>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.ImageHelper.CalculateThumbnailWidthAndHeight(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean,System.Int32)">
            <summary>
            Calculate the required width and height of a thumbnail image based on the user settings and while preserving the
            aspect ratio of the original dimensions. If the autoEnlarge parameter is false, then preserve the original
            dimensions if they are smaller than the user-specified thumbnail dimensions. If true, then ensure that at
            least one of the out parameters (newWidth or newHeight) meets the user-specified thumbnail dimensions
            (i.e. enlarge a small image if necessary). This method does not create a thumbnail image.
            </summary>
            <param name="originalWidth">An integer specifying the width, in pixels, of the source image.</param>
            <param name="originalHeight">An integer specifying the height, in pixels, of the source image.</param>
            <param name="newWidth">An integer specifying the width, in pixels, of a thumbnail image that preserves
            the aspect ratio of the original's width and height.</param>
            <param name="newHeight">An integer specifying the height, in pixels, of a thumbnail image that preserves
            the aspect ratio of the original's width and height.</param>
            <param name="autoEnlarge">A value indicating whether to enlarge images that are smaller than the
            MaxThumbnailLength configuration setting. If true, the new width and height will be increased if necessary
            so that at least one of the values is larger than the MaxThumbnailLength value. If false, the original
            width and height are returned when their dimensions are smaller than the MaxThumbnailLength value. This
            parameter has no effect when MaxThumbnailLength is greater than both originalWidth and originalHeight.</param>
            <param name="maxThumbnailLength">The length (in pixels) of the longest edge of a thumbnail image.</param>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.ImageHelper.CreateResizedBitmap(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new Bitmap with the specified dimensions.
            </summary>
            <param name="inputBmp">The source bitmap to use.</param>
            <param name="sourceBmpWidth">The width of the input bitmap. This should be equal to inputBmp.Size.Width, but it is added as
            a parameter so that calling code can send a cached value rather than requiring this method to query the bitmap for the data.
            If a value less than zero is specified, then inputBmp.Size.Width is used.
            </param>
            <param name="sourceBmpHeight">The height of the input bitmap. This should be equal to inputBmp.Size.Height, but it is added as
            a parameter so that calling code can send a cached value rather than requiring this method to query the bitmap for the data.</param>
            If a value less than zero is specified, then inputBmp.Size.Height is used.
            <param name="newWidth">The width of the new bitmap.</param>
            <param name="newHeight">The height of the new bitmap.</param>
            <returns>Returns a new Bitmap with the specified dimensions.</returns>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.ImageHelper.SaveImageToDisk(System.Drawing.Image,System.String,System.Drawing.Imaging.ImageFormat,System.Int32)">
            <summary>
            Persist the specified image to disk at the specified path. If the directory to contain the file does not exist, it
            is automatically created.
            </summary>
            <param name="image">The image to persist to disk.</param>
            <param name="newFilePath">The full physical path, including the file name to where the image is to be stored. Ex: C:\mypics\cache\2008\May\flower.jpg</param>
            <param name="imageFormat">The file format for the image.</param>
            <param name="jpegQuality">The quality value to save JPEG images at. This is a value between 1 and 100. This parameter
            is ignored if the image format is not JPEG.</param>
        </member>
        <member name="M:Starsoft.Core.MediaSupport.ImageHelper.VerifyDirectoryExistsForNewFile(System.String)">
            <summary>
            Make sure the directory exists for the file at the specified path. It is created if it does not exist. 
            (For example, it might not exist when the user changes the thumbnail or optimized location and subsequently 
            synchronizes. This process creates a new directory structure to match the directory structure where the 
            originals are stored, and there may be cases where we need to save a file to a directory that doesn't yet exist.
            </summary>
            <param name="newFilepath">The full physical path for which to verify the directory exists. Ex: C:\mypics\cache\2008\May\flower.jpg</param>
        </member>
        <member name="T:Starsoft.Core.Cryptography.CryptoHash">
            <summary>
            Cryptography service to encrypt and decrypt strings.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoHash.#ctor">
            <summary>
            Default options
            </summary>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoHash.#ctor(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="!:SymmetricCryptoService"/> class.
            </summary>
            <param name="key"></param>
            <param name="algorithm"></param>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoHash.#ctor(Starsoft.Core.Cryptography.CryptoConfig,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="!:SymmetricCryptoService"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="algorithm"></param>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoHash.SetAlgorithm(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Set the creator for the algorithm.
            </summary>
            <param name="algorithm"></param>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoHash.Encrypt(System.String)">
            <summary>
            Encrypts the plaintext using an internal private key.
            </summary>
            <param name="plaintext">The text to encrypt.</param>
            <returns>An encrypted string in base64 format.</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoHash.Decrypt(System.String)">
            <summary>
            Decrypts the base64key using an internal private key.
            </summary>
            <param name="base64Text">The encrypted string in base64 format.</param>
            <returns>The plaintext string.</returns>
        </member>
        <member name="M:Starsoft.Core.Cryptography.CryptoHash.IsMatch(System.String,System.String)">
            <summary>
            Determine if encrypted text can be matched to unencrypted text.
            </summary>
            <param name="encrypted"></param>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Cryptography.CryptoHash.Settings">
            <summary>
            Options for encryption.
            </summary>
            <value></value>
        </member>
        <member name="T:Starsoft.Core.DateUtils">
            <summary>
            日期实用工具类
            </summary>
        </member>
        <member name="M:Starsoft.Core.DateUtils.DaysAgo(System.Int32)">
            <summary>
            Dayses the ago.
            </summary>
            <param name="days">The days.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.DaysFromNow(System.Int32)">
            <summary>
            Dayses from now.
            </summary>
            <param name="days">The days.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.HoursAgo(System.Int32)">
            <summary>
            Hourses the ago.
            </summary>
            <param name="hours">The hours.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.HoursFromNow(System.Int32)">
            <summary>
            Hourses from now.
            </summary>
            <param name="hours">The hours.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.MinutesAgo(System.Int32)">
            <summary>
            Minuteses the ago.
            </summary>
            <param name="minutes">The minutes.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.MinutesFromNow(System.Int32)">
            <summary>
            Minuteses from now.
            </summary>
            <param name="minutes">The minutes.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.SecondsAgo(System.Int32)">
            <summary>
            Secondses the ago.
            </summary>
            <param name="seconds">The seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.SecondsFromNow(System.Int32)">
            <summary>
            Seconds from now.
            </summary>
            <param name="seconds">The seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.Diff(System.DateTime,System.DateTime)">
            <summary>
            Diffs the specified date one.
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.DiffDays(System.String,System.String)">
            <summary>
            Diffs the days.
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.DiffDays(System.DateTime,System.DateTime)">
            <summary>
            Diffs the days.
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.DiffHours(System.String,System.String)">
            <summary>
            Diffs the hours.
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.DiffHours(System.DateTime,System.DateTime)">
            <summary>
            Diffs the hours.
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.DiffMinutes(System.String,System.String)">
            <summary>
            Diffs the minutes.
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.DiffMinutes(System.DateTime,System.DateTime)">
            <summary>
            Diffs the minutes.
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.ReadableDiff(System.DateTime,System.DateTime)">
            <summary>
            Displays the difference in time between the two dates. Return example is "12 years 4 months 24 days 8 hours 33 minutes 5 seconds"
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.CountWeekdays(System.DateTime,System.DateTime)">
            <summary>
            计算两个日期之间的工作日数
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.CountWeekends(System.DateTime,System.DateTime)">
            <summary>
            计算两个日期之间的周末数
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.IsDate(System.Object)">
            <summary>
            验证对象的字符串形式是否可以转换为日期
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.IsWeekDay(System.DateTime)">
            <summary>
            检查日期是否为一个工作日（周一 - 周五）
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.IsWeekEnd(System.DateTime)">
            <summary>
             检查日期是否是星期六或星期日
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.TimeDiff(System.DateTime,System.DateTime)">
            <summary>
            Displays the difference in time between the two dates. Return example is "12 years 4 months 24 days 8 hours 33 minutes 5 seconds"
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.GetFormattedMonthAndDay(System.DateTime)">
            <summary>
            Given a datetime object, returns the formatted month and day, i.e. "April 15th" 
            </summary>
            <param name="date">The date to extract the string from</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.GetDateDayWithSuffix(System.DateTime)">
            <summary>
            Given a datetime object, returns the formatted day, "15th" 
            </summary>
            <param name="date">The date to extract the string from</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.FormatDate(System.DateTime)">
            <summary>
            
            </summary>
            <param name="theDate"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.FormatDate(System.DateTime,System.Boolean)">
            <summary>
            
            </summary>
            <param name="theDate"></param>
            <param name="showTime"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.DateUtils.FormatDate(System.DateTime,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="theDate"></param>
            <param name="showTime"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Configuration.Config">
            <summary>
            Utility class for the configuration reflector.
            </summary>
        </member>
        <member name="F:Starsoft.Core.Configuration.Config._current">
            <summary>
            Current configuration source based on the current
            Environment. <see cref="!:Environments.Current"/>
            </summary>
        </member>
        <member name="M:Starsoft.Core.Configuration.Config.Init(Starsoft.Core.Configuration.IConfigSource)">
            <summary>
            Initialize the current config provider.
            </summary>
            <param name="inheritanceBasedConfig"></param>
        </member>
        <member name="M:Starsoft.Core.Configuration.Config.Get(System.String)">
            <summary>
            Convenience method for getting typed config value from current config provider.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.Config.GetString(System.String)">
            <summary>
            Convenience method for getting typed config value from current config provider.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.Config.Get``1(System.String)">
            <summary>
            Convenience method for getting typed config value from current config provider.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.Config.Get``1(System.Int32)">
            <summary>
            Convenience method for getting typed config value from current config provider using index position of key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexOfKey"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.Config.Get(System.String,System.String)">
            <summary>
            Convenience method for getting section/key value from current config.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.Config.GetString(System.String,System.String)">
            <summary>
            Convenience method for getting section/key value from current config.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.Config.Get``1(System.String,System.String)">
            <summary>
            Convenience method for getting section/key value from current config.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.Config.GetDefault``1(System.String,System.String,``0)">
            <summary>
            Convenience method for getting section/key value from current config.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue">The default value to use if key is not available.</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.Config.GetSection(System.String)">
            <summary>
            Get the configuration section with the specified name.
            </summary>
            <param name="sectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.Config.ContainsKey(System.String)">
            <summary>
            Convenience method for checking if config key exists.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.Config.ContainsKey(System.String,System.String)">
            <summary>
            Convenience method for checking if config key exists.
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Configuration.Config.Save">
            <summary>
            Save the configuration.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Configuration.Config.Current">
            <summary>
            Current config.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Configuration.Config.Sections">
            <summary>
            The names of the sections in this config provider.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Configuration.Config.Name">
            <summary>
            The name of this config provider.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Configuration.Config.SourcePath">
            <summary>
            The full path to the source for this config provider.
            </summary>
        </member>
        <member name="T:Starsoft.Core.IO.FileUtils">
            <summary>
            File utils.
            </summary>
        </member>
        <member name="M:Starsoft.Core.IO.FileUtils.GetOriginalExtension(System.String,System.String)">
            <summary>
            Gets the orginal extension from a renamed extension. e.g. file.xml.config return .xml instead of .config. file.xml returns .xml.
            </summary>
            <param name="path">/config/users.csv.config</param>
            <param name="appendedExtension">The extra extension appended to the file. e.g. ".config"</param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.IO.FileUtils.PrependText(System.String,System.IO.FileInfo)">
            <summary>
            Prepend the text.
            </summary>
            <param name="text"></param>
            <param name="file"></param>
        </member>
        <member name="M:Starsoft.Core.IO.FileUtils.GetFileText(System.String)">
            <summary>
            Read a text file and obtain it's contents.
            </summary>
            <param name="absolutePath">The complete file path to write to.</param>
            <returns>String containing the content of the file.</returns>
        </member>
        <member name="M:Starsoft.Core.IO.FileUtils.CreateToFile(System.String,System.String)">
            <summary>
            Creates or opens a file for writing and writes text to it.
            </summary>
            <param name="absolutePath">The complete file path to write to.</param>
            <param name="fileText">A String containing text to be written to the file.</param>
        </member>
        <member name="M:Starsoft.Core.IO.FileUtils.UpdateFileText(System.String,System.String,System.String)">
            <summary>
            Update text within a file by replacing a substring within the file.
            </summary>
            <param name="absolutePath">The complete file path to write to.</param>
            <param name="lookFor">A String to be replaced.</param>
            <param name="replaceWith">A String to replace all occurrences of lookFor.</param>
        </member>
        <member name="M:Starsoft.Core.IO.FileUtils.WriteToFile(System.String,System.String)">
            <summary>
            Writes out a string to a file.
            </summary>
            <param name="absolutePath">The complete file path to write to.</param>
            <param name="fileText">A String containing text to be written to the file.</param>
        </member>
        <member name="M:Starsoft.Core.IO.FileUtils.GetVersion(System.String)">
            <summary>
            Get the file version information.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Starsoft.Core.IO.FileUtils.GetSizeInBytes(System.String)">
            <summary>
            Get file size in bytes.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.IO.FileUtils.GetSizeInKilo(System.String)">
            <summary>
            Get file size in kilobytes.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.IO.FileUtils.GetSizeInMegs(System.String)">
            <summary>
            Get file size in megs.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.IO.FileUtils.FromByteCount(System.Int64)">
            <summary>
            Display bytes as a suitable unit of measurement.
            </summary>
            <remarks>
            Uses 1024^x for the units as used by memory and file sizing. Do not use in
            telecommunications where 1000^x is the norm.
            </remarks>
            <param name="bytes">Number of bytes to display.</param>
            <returns>A String formatted with the number of bytes and suitable unit of measurement.</returns>
        </member>
        <member name="M:Starsoft.Core.IO.FileUtils.FormatBytesStr(System.Int32)">
            <summary>
            格式化字节数字符串
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.IO.FileUtils.SaveRemoteFile(System.String,System.String)">
            <summary>
            保存远程的文件到本地
            </summary>
            <param name="localFilePath">保存到本地文件名</param>
            <param name="remoteFileUrl">远程读取的文件URL</param>
            <returns>如果保存成功则返回 true,否则返回 false</returns>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryOrdered`2.Add(`0,`1)">
            <summary>
            Add to key/value for both forward and reverse lookup.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryOrdered`2.ContainsKey(`0)">
            <summary>
            Determine if the key is contain in the forward lookup.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryOrdered`2.Remove(`0)">
            <summary>
            Remove the key from the ordered dictionary.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryOrdered`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get the value from the forward lookup.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryOrdered`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add to ordered lookup.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryOrdered`2.Clear">
            <summary>
            Clears keys/value for bi-directional lookup.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryOrdered`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determine if the item is in the forward lookup.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryOrdered`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the array of key/value pairs for both ordered dictionary.
            TO_DO: This needs to implemented.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryOrdered`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove the item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryOrdered`2.GetEnumerator">
            <summary>
            Get the enumerator for the forward lookup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryOrdered`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for the forward lookup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryOrdered`2.Insert(System.Int32,`0,`1)">
            <summary>
            Insert key/value at the specified index.
            </summary>
            <param name="index"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryOrdered`2.IndexOfKey(`0)">
            <summary>
            Get the index of the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryOrdered`2.RemoveAt(System.Int32)">
            <summary>
            Remove the key/value item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryOrdered`2.Keys">
            <summary>
            Get a list of all the keys in the forward lookup.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryOrdered`2.Values">
            <summary>
            Get the collection of values.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryOrdered`2.Item(`0)">
            <summary>
            Set the key / value for bi-directional lookup.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryOrdered`2.Count">
            <summary>
            Get number of entries.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryOrdered`2.IsReadOnly">
            <summary>
            Get whether or not this is read-only.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryOrdered`2.Item(System.Int32)">
            <summary>
            Get/set the value at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Starsoft.Core.Collections.DictionaryMultiValue`2">
            <summary>
            Dictionary based class to allow multiple values for a specific key.
            e.g. "searchsettings" = list{ setting1, setting2, setting3, .. settingN }
            where setting1 and setting2 both are associated with keys.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryMultiValue`2.#ctor">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryMultiValue`2.#ctor(System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            Constructor requiring the generic dictionary being wrapped.
            </summary>
            <param name="dict"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryMultiValue`2.ContainsKey(`0)">
            <summary>
            Determine if the underlying collection contains the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryMultiValue`2.Get(`0)">
            <summary>
            Returns the entire list associated with the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryMultiValue`2.Add(`0,`1)">
            <summary>
            Add the key-value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryMultiValue`2.Remove(`0)">
            <summary>
            Not-supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryMultiValue`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get the value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryMultiValue`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Not-supported.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryMultiValue`2.Clear">
            <summary>
            Not-Supported.
            </summary>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryMultiValue`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determine whether key value pair is in dictionary.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryMultiValue`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copy items to the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryMultiValue`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Non-supported action.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Starsoft.Core.Collections.DictionaryMultiValue`2.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryMultiValue`2.Count">
            <summary>
            Number of items in the dictionary.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryMultiValue`2.Item(`0)">
            <summary>
            Returns the first of the multiple values associated with the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryMultiValue`2.Keys">
            <summary>
            Return keys.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryMultiValue`2.Values">
            <summary>
            Get the values.
            </summary>
        </member>
        <member name="P:Starsoft.Core.Collections.DictionaryMultiValue`2.IsReadOnly">
            <summary>
            Indicate read-only
            </summary>
        </member>
        <member name="T:Starsoft.Core.Tuple2`2">
            <summary>
            This structure can be used to hold
            a tuple of two different types of objects.
            </summary>
            <typeparam name="T1">Type of first object.</typeparam>
            <typeparam name="T2">Type of second object.</typeparam>
        </member>
        <member name="M:Starsoft.Core.Tuple2`2.#ctor(`0,`1)">
            <summary>
            Initialize the tuple items.
            </summary>
            <param name="first">First item of tuple.</param>
            <param name="second">Second item of tuple.</param>
        </member>
        <member name="P:Starsoft.Core.Tuple2`2.First">
            <summary>
            The first item of the tuple
            </summary>
        </member>
        <member name="P:Starsoft.Core.Tuple2`2.Second">
            <summary>
            The second item of the tuple
            </summary>
        </member>
        <member name="T:Starsoft.Core.Tuple3`3">
            <summary>
            This structure can be used to hold
            a tuple of three different types of objects.
            </summary>
            <typeparam name="T1">Type of first object.</typeparam>
            <typeparam name="T2">Type of second object.</typeparam>
            <typeparam name="T3">Type of third object.</typeparam>
        </member>
        <member name="M:Starsoft.Core.Tuple3`3.#ctor(`0,`1,`2)">
            <summary>
            Initialize the tuple items.
            </summary>
            <param name="first">First type.</param>
            <param name="second">Second type.</param>
            <param name="third">Third type.</param>
        </member>
        <member name="P:Starsoft.Core.Tuple3`3.First">
            <summary>
            The first item of the tuple
            </summary>
        </member>
        <member name="P:Starsoft.Core.Tuple3`3.Second">
            <summary>
            The second item of the tuple
            </summary>
        </member>
        <member name="P:Starsoft.Core.Tuple3`3.Third">
            <summary>
            The second item of the tuple
            </summary>
        </member>
    </members>
</doc>
